"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8320],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(n),d=a,g=p["".concat(l,".").concat(d)]||p[d]||c[d]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1016:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7462),a=n(7294);function o(e){let{children:t,...n}=e;return a.createElement("div",(0,r.Z)({role:"tabpanel"},n),t)}},250:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(7294),a=n(7094),o=n(6010);const i="tabItem_V91s",s="tabItemActive_JsUu",l="tab_ntnM";const m=37,u=39;function c(e){const{lazy:t,defaultValue:n,values:c,groupId:p}=e,{tabGroupChoices:d,setTabGroupChoices:g}=(0,a.U)(),[f,v]=(0,r.useState)(n),b=r.Children.toArray(e.children),y=[];if(null!=p){const e=d[p];null!=e&&e!==f&&c.some((t=>t.value===e))&&v(e)}const N=e=>{const t=e.currentTarget,n=y.indexOf(t),r=c[n].value;v(r),null!=p&&(g(p,r),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:r,right:a}=e.getBoundingClientRect(),{innerHeight:o,innerWidth:i}=window;return t>=0&&a<=i&&r<=o&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((()=>t.classList.remove(s)),2e3))}),150))},h=e=>{let t;switch(e.keyCode){case u:{const n=y.indexOf(e.target)+1;t=y[n]||y[0];break}case m:{const n=y.indexOf(e.target)-1;t=y[n]||y[y.length-1];break}default:return}t.focus()},k=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},c.map((e=>{let{value:t,label:n}=e;return r.createElement("li",{role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,className:(0,o.Z)("tabs__item",i,{"tabs__item--active":f===t}),key:t,ref:e=>e&&y.push(e),onKeyDown:h,onFocus:N,onClick:N},n)}))),t?r.cloneElement(b.find((e=>k(f,e.props))),{className:l}):r.createElement("div",null,b.map(((e,t)=>r.cloneElement(e,{key:t,hidden:!k(f,e.props),className:l})))),r.createElement("br",null))}},8019:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));n(250),n(1016),n(4996);const o={},i="Custom Name Providers",s={unversionedId:"dev/names/name-providers",id:"dev/names/name-providers",title:"Custom Name Providers",description:"If you have some kind of complicated naming strategy, then you might want to use INameProvider. This way you can control what strings are returned by NameDB.GetName in a more generic way. Just create a class implementing INameProvider and add it to RogueFramework.",source:"@site/docs/dev/names/name-providers.mdx",sourceDirName:"dev/names",slug:"/dev/names/name-providers",permalink:"/RogueLibs/docs/dev/names/name-providers",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/names/name-providers.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Custom Languages*",permalink:"/RogueLibs/docs/dev/names/custom-languages"},next:{title:"Custom Sprites and Resources",permalink:"/RogueLibs/docs/dev/custom-sprites"}},l={},m=[],u={toc:m};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-name-providers"},"Custom Name Providers"),(0,a.kt)("p",null,"If you have some kind of complicated naming strategy, then you might want to use ",(0,a.kt)("inlineCode",{parentName:"p"},"INameProvider"),". This way you can control what strings are returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"NameDB.GetName")," in a more generic way. Just create a class implementing ",(0,a.kt)("inlineCode",{parentName:"p"},"INameProvider")," and add it to ",(0,a.kt)("inlineCode",{parentName:"p"},"RogueFramework"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyNameProvider.cs"',title:'"MyNameProvider.cs"'},'public class MyNameProvider : INameProvider\n{\n    public void GetName(string name, string type, ref string? result)\n    {\n        if (name.StartsWith("fake_"))\n        {\n            string sub = name.Substring("fake_".Length);\n            result = LanguageService.NameDB.GetName(sub, type);\n        }\n    }\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If the original ",(0,a.kt)("inlineCode",{parentName:"p"},"NameDB.GetName")," returned an error string (with ",(0,a.kt)("inlineCode",{parentName:"p"},"E_")," prefix), ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"RogueFramework.NameProviders.Add(new MyNameProvider());\n")),(0,a.kt)("p",null,"Here's a more practical and useful example, that is already implemented in RogueLibs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class DialogueNameProvider : INameProvider\n{\n    public void GetName(string name, string type, ref string? result)\n    {\n        if (result is null && type == "Dialogue" && name.StartsWith("NA_"))\n        {\n            string sub = name.Substring("NA_".Length);\n            string newResult = LanguageService.NameDB.GetName(sub, type);\n            if (!newResult.StartsWith("E_")) result = newResult;\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Normally, the game looks for dialogue names of the following format: ",(0,a.kt)("inlineCode",{parentName:"p"},"<AgentName>_<DialogueName>"),". If such a name doesn't exist, then ",(0,a.kt)("inlineCode",{parentName:"p"},"NA_<DialogueName>")," (NA - No Agent) is used instead. This name provider will also look for a name with just the dialogue name. This allows the developers to write dialogue names without that annoying ",(0,a.kt)("inlineCode",{parentName:"p"},"NA_")," prefix."))}c.isMDXComponent=!0}}]);