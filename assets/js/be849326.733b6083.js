"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3221],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={},o="Creating a Custom Interaction",s={unversionedId:"dev/interactions/create-interaction",id:"dev/interactions/create-interaction",title:"Creating a Custom Interaction",description:"RogueLibs v3.5.0 introduced custom interactions with a pretty unique syntax. All of the code is condensed and basically can be put into a single method. You just need to keep in mind that the main function must be pure (mustn't do anything, except add/remove buttons and set callbacks), and that all of the side effects must be set using SetSideEffect or SetStopCallback.",source:"@site/docs/dev/interactions/create-interaction.mdx",sourceDirName:"dev/interactions",slug:"/dev/interactions/create-interaction",permalink:"/RogueLibs/docs/dev/interactions/create-interaction",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/interactions/create-interaction.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Creating a Custom Effect",permalink:"/RogueLibs/docs/dev/traits/create-effect"},next:{title:"Creating a Custom Disaster",permalink:"/RogueLibs/docs/dev/disasters/create-disaster"}},l={},c=[{value:"Using <code>SimpleInteractionProvider</code> class",id:"simpleinteractionprovider",level:2},{value:"Implicit Buttons",id:"implicit-buttons",level:2},{value:"Stopping the interaction",id:"stopping-interaction",level:2},{value:"Stop Callbacks",id:"stop-callbacks",level:2},{value:"Side Effects",id:"side-effects",level:2},{value:"Manipulating buttons",id:"manipulating-buttons",level:2},{value:"Examples",id:"examples",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-a-custom-interaction"},"Creating a Custom Interaction"),(0,i.kt)("p",null,"RogueLibs v3.5.0 introduced custom interactions with a pretty unique syntax. All of the code is condensed and basically can be put into a single method. You just need to keep in mind that the main function must be pure (mustn't do anything, except add/remove buttons and set callbacks), and that all of the side effects must be set using ",(0,i.kt)("inlineCode",{parentName:"p"},"SetSideEffect")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SetStopCallback"),"."),(0,i.kt)("h2",{id:"simpleinteractionprovider"},"Using ",(0,i.kt)("inlineCode",{parentName:"h2"},"SimpleInteractionProvider")," class"),(0,i.kt)("p",null,"The simplest way to create custom interactions is by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleInteractionProvider")," class. It allows you to utilize all of the object-oriented programming principles and keeps the code simple and straightforward. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"RogueInteractions.CreateProvider<T>")," methods to create instances of that class. You can add buttons using ",(0,i.kt)("inlineCode",{parentName:"p"},"h.AddButton")," inside the handler."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// highlight-next-line\nRogueInteractions.CreateProvider<Crate>(static h => /* h - handler */\n{\n    // If interacted with via hacking, do not add the button\n    if (h.Helper.interactingFar) return;\n\n    InvItem crateOpener = h.Agent.inventory.FindItem("CrateOpener");\n    if (crateOpener is not null)\n    {\n        // Add the button with a name "UseCrateOpener", with " (<count>) -1" string added to the end\n        string extra = $" ({crateOpener.invItemCount}) -1";\n        // highlight-next-line\n        h.AddButton("UseCrateOpener", extra, static m => /* m - interaction model */\n        {\n            m.Agent.inventory.SubtractFromItemCount(m.Agent.inventory.FindItem("CrateOpener"), 1);\n            m.Object.UnlockCrate();\n            m.Object.ShowChest();\n        });\n    }\n});\n\n// Don\'t forget to add the localization string for "UseCrateOpener"\nRogueLibs.CreateCustomName("UseCrateOpener", NameTypes.Interface,\n                           new CustomNameInfo("Use Crate Opener"));\n')),(0,i.kt)("admonition",{title:"Handler purity",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Handler methods must be pure, that is, they shouldn't make any observable changes. All of the logic must be contained in buttons, ",(0,i.kt)("a",{parentName:"p",href:"#stop-callbacks"},"stop callbacks")," and ",(0,i.kt)("a",{parentName:"p",href:"#side-effects"},"side effects"),"."),(0,i.kt)("p",{parentName:"admonition"},"If you need something to happen immediately after interacting with something, use ",(0,i.kt)("a",{parentName:"p",href:"#side-effects"},"side effects"),". ",(0,i.kt)("strong",{parentName:"p"},"DO NOT")," write that kind of logic in the interaction provider, because it's also used to determine whether an object is interactable and gets called a lot.")),(0,i.kt)("p",null,"If you have complicated logic with buttons, you can delegate their actions to local or declared methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'RogueInteractions.CreateProvider<Crate>(static h =>\n{\n    // highlight-next-line\n    static void UseCrateOpener(InteractionModel<Crate> model)\n    { \n        /* ... */\n    }\n\n    // highlight-next-line\n    h.AddButton("UseCrateOpener", UseCrateOpener);\n});\n')),(0,i.kt)("p",null,"By specifying a type parameter to the method (like ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateProvider<Crate>"),"), it will narrow down the type of objects that you want to add interactions to. If your action may affect multiple types of objects, you can use the more general ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateProvider")," method, that is triggered on all kinds of objects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// highlight-next-line\nRogueInteractions.CreateProvider(static h =>\n{\n    if (h.Object is Crate)\n        h.AddButton("UseCrateOpener", static m => { /* ... */ });\n    else if (h.Object is Safe)\n        h.AddButton("UseSafeOpener", static m => { /* ... */ });\n    else if (h.Object is Agent)\n        h.AddButton("UseSkullOpener", static m => { /* ... */ });\n});\n')),(0,i.kt)("admonition",{title:"Note the staticity of the lambdas",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It is important that you do not reference ",(0,i.kt)("inlineCode",{parentName:"p"},"h")," or other variables inside button actions, as they are called in different phases of the interaction process (an exception will be thrown). I recommend using the ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," keyword when writing lambda expressions to avoid that.")),(0,i.kt)("h2",{id:"implicit-buttons"},"Implicit Buttons"),(0,i.kt)("p",null,'Sometimes buttons represent interactions so obvious that you don\'t want the player to explicitly press them. For example, doors. It would be a nuisance to press "Open" every time you interact with the door. An ',(0,i.kt)("strong",{parentName:"p"},"implicit button")," is pressed automatically if it's the only button in the menu; otherwise, it acts as a regular button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'RogueInteractions.CreateProvider<Crate>(static h =>\n{\n    // highlight-next-line\n    h.AddImplicitButton("InspectWeirdCrate", static m =>\n    {\n        /* ... */\n        m.Agent.SayDialogue("InspectWeirdCrate");\n    });\n\n    if (h.Agent.inventory.HasItem("CrateOpener"))\n    {\n        h.AddButton("UseCrateOpener", static m => { /* ... */ });\n    }\n});\n')),(0,i.kt)("p",null,"If the player doesn't have a Crate Opener, the ",(0,i.kt)("inlineCode",{parentName:"p"},'"InspectWeirdCrate"')," button will be pressed immediately, without even showing the buttons. If the player has a Crate Opener though, a menu with 2 buttons will pop up (2, not counting the ",(0,i.kt)("inlineCode",{parentName:"p"},'"Done"')," button)."),(0,i.kt)("h2",{id:"stopping-interaction"},"Stopping the interaction"),(0,i.kt)("p",null,"If your interaction failed miserably, not allowing the player to press any other buttons, or if you just want the player to go do something else right after this interaction, use ",(0,i.kt)("inlineCode",{parentName:"p"},"m.StopInteraction()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'RogueInteractions.CreateProvider<Crate>(static h =>\n{\n    if (h.Helper.interactingFar) return;\n\n    if (h.Agent.HasTrait("CrateBomber"))\n    {\n        h.AddButton("TriggerBomb", static m =>\n        {\n            m.gc.spawnerMain.SpawnExplosion(m.Object, m.Object.tr.position, "Big");\n            // highlight-next-line\n            m.StopInteraction();\n        });\n    }\n});\n')),(0,i.kt)("admonition",{title:"Forcibly stopping the interaction",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There's also an overload accepting a ",(0,i.kt)("inlineCode",{parentName:"p"},"forced: bool")," parameter. By default, the interaction stop is delayed until after all of the interactions and side effects are executed. If you pass ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," as the argument, the interaction will be stopped by the time ",(0,i.kt)("inlineCode",{parentName:"p"},"StopInteraction(true)")," returns."),(0,i.kt)("p",{parentName:"admonition"},"Use it when opening another menu or redirecting the interaction to a different object.")),(0,i.kt)("h2",{id:"stop-callbacks"},"Stop Callbacks"),(0,i.kt)("p",null,"If your specific interaction failed, but some other interactions from other mods might still work, use ",(0,i.kt)("strong",{parentName:"p"},"stop callbacks"),". They are called only if there are no other buttons in the menu, or if the interaction is stopped using ",(0,i.kt)("inlineCode",{parentName:"p"},"StopInteraction"),"."),(0,i.kt)("p",null,"Stop callbacks are usually used to relay information as to why the interaction was unsuccessful."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'RogueInteractions.CreateProvider<Crate>(static h =>\n{\n    if (h.Helper.interactingFar) return;\n\n    if (!h.Agent.inventory.HasItem("CrateOpener"))\n    {\n        // highlight-start\n        h.SetStopCallback(static m =>\n        {\n            m.gc.audioHandler.Play(m.Agent, "CantDo");\n            m.Agent.SayDialogue("NeedCrateOpener");\n        });\n        // highlight-end\n    }\n    /* ... */\n});\n')),(0,i.kt)("admonition",{title:"Overriding stop callbacks",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"SetStopCallback")," overrides any previously defined stop callbacks. If you want to combine your stop callback with any previously defined ones, use ",(0,i.kt)("inlineCode",{parentName:"p"},"CombineStopCallback"),".")),(0,i.kt)("h2",{id:"side-effects"},"Side Effects"),(0,i.kt)("p",null,"Sometimes you want something to happen right after interacting with the object. For example, make the interacted agent react to you interacting with them, or make a bomb explode in your face when you touch it. ",(0,i.kt)("strong",{parentName:"p"},"Side effects")," are called right after the buttons are set up, but before stop callbacks. So, side effects get called even if the interaction failed or if there are no available buttons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'RogueInteractions.CreateProvider<Crate>(static h =>\n{\n    // Make the interacting agent say something right after interacting\n    // with the crate, even if they don\'t have the Crate Opener.\n    // highlight-next-line\n    h.SetSideEffect(static m => m.Agent.SayDialogue("DialogueWeirdCrate"));\n    \n    if (h.Agent.inventory.HasItem("CrateOpener"))\n    {\n        h.AddButton("UseCrateOpener", static m =>\n        {\n            /* ... */\n        });\n    }\n});\n')),(0,i.kt)("admonition",{title:"Overriding side effects",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"SetSideEffect")," overrides any previously defined side effects. If you want to combine your side effect with any previously defined ones, use ",(0,i.kt)("inlineCode",{parentName:"p"},"CombineSideEffect"),".")),(0,i.kt)("h2",{id:"manipulating-buttons"},"Manipulating buttons"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleInteractionProvider")," class contains ",(0,i.kt)("inlineCode",{parentName:"p"},"HasButton")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoveButton")," methods.",(0,i.kt)("br",{parentName:"p"}),"\n","Use them to augment or modify vanilla or other mods' interactions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'RogueInteractions.CreateProvider<Door>(static h =>\n{\n    if (h.Agent.HasTrait("KeyIlliterate"))\n    {\n        if (h.HasButton("UseKey"))\n        {\n            h.RemoveButton("UseKey");\n            h.SetStopCallback(static m => m.Agent.SayDialogue("IlliterateCantUseKeys"));\n        }\n        if (h.HasButton("UseSkeletonKey"))\n        {\n            h.RemoveButton("UseSkeletonKey");\n            h.SetStopCallback(static m => m.Agent.SayDialogue("IlliterateCantUseKeys"));\n        }\n    }\n});\n')),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"You can find a ton of examples ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SugarBarrel/RogueLibs/tree/main/RogueLibsCore/Interactions/VanillaInteractions"},"here")," (RogueLibs' source code, reimplementing the vanilla interactions)."))}d.isMDXComponent=!0}}]);