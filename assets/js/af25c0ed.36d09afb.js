"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1590],{4214:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7294),i=a(814);function r(e){let{children:t,language:a}=e;return n.createElement(i.Z,{className:"language-"+(a||"csharp")},t.replace(/\t/g,"    "))}},1016:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(7462),i=a(7294);function r(e){let{children:t,...a}=e;return i.createElement("div",(0,n.Z)({role:"tabpanel"},a),t)}},5878:(e,t,a)=>{a.d(t,{Z:()=>g});var n=a(7294),i=a(6550),r=a(1980),l=a(7392),o=a(12);function s(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:i}}=e;return{value:t,label:a,attributes:n,default:i}}))}function u(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??s(a);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const l=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,r._X)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(l.location.search);t.set(o,e),l.replace({...l.location,search:t.toString()})}),[o,l])]}function c(e){const{defaultValue:t,queryString:a=!1,groupId:i}=e,r=u(e),[l,s]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[c,p]=m({queryString:a,groupId:i}),[h,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,r]=(0,o.Nk)(a);return[i,(0,n.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:i}),g=(()=>{const e=c??h;return d({value:e,tabValues:r})?e:null})();(0,n.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),k(e)}),[p,k,r]),tabValues:r}}var p=a(6010);const h={tabItem:"tabItem_V91s",tabItemActive:"tabItemActive_JsUu",blink:"blink_ZPVS",tab:"tab_ntnM"};const k={left:37,right:39};function g(e){const{lazy:t,defaultValue:a,values:i,groupId:r}=e,l=n.Children.toArray(e.children),{tabValues:o,selectedValue:s,selectValue:u}=c({children:l,defaultValue:a,values:i,groupId:r}),d=[],m=e=>{const t=e.currentTarget,a=i[d.indexOf(t)].value;u(a),null!=r&&setTimeout((()=>{(function(e){const{top:t,left:a,bottom:n,right:i}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:l}=window;return t>=0&&i<=l&&n<=r&&a>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(h.tabItemActive),setTimeout((()=>t.classList.remove(h.tabItemActive)),2e3))}),150)},g=e=>{let t;switch(e.keyCode){case k.right:{const a=d.indexOf(e.target)+1;t=d[a]||d[0];break}case k.left:{const a=d.indexOf(e.target)-1;t=d[a]||d[d.length-1];break}default:return}t.focus()},b=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},i.map((e=>{let{value:t,label:a}=e;return n.createElement("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,className:(0,p.Z)("tabs__item",h.tabItem,{"tabs__item--active":s===t}),key:t,ref:e=>e&&d.push(e),onKeyDown:g,onFocus:m,onClick:m},a)}))),t?n.cloneElement(l.find((e=>b(s,e.props))),{className:h.tab}):n.createElement("div",null,l.map(((e,t)=>n.cloneElement(e,{key:t,hidden:!b(s,e.props),className:h.tab})))),n.createElement("br",null))}},7352:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>g,frontMatter:()=>u,metadata:()=>m,toc:()=>p});var n=a(7462),i=(a(7294),a(3905)),r=a(5878),l=a(1016),o=(a(4996),a(4214));const s='using System;\n\nnamespace RogueLibsCore.Test\n{\n    public class Smoker : CustomTrait, ITraitUpdateable\n    {\n        [RLSetup]\n        public static void Setup()\n        {\n            RogueLibs.CreateCustomTrait<Smoker>()\n                .WithName(new CustomNameInfo("Smoker"))\n                .WithDescription(new CustomNameInfo("Randomly cough, alerting enemies"))\n                .WithUnlock(new TraitUnlock { CharacterCreationCost = -4 });\n\n            RogueLibs.CreateCustomName("Smoker_Cough1", NameTypes.Dialogue, new CustomNameInfo("*Cough*"));\n            RogueLibs.CreateCustomName("Smoker_Cough2", NameTypes.Dialogue, new CustomNameInfo("*Cough* *CouGH*"));\n            RogueLibs.CreateCustomName("Smoker_Cough3", NameTypes.Dialogue, new CustomNameInfo("*coUGH* *COUgh*"));\n        }\n\n        public override void OnAdded() { }\n        public override void OnRemoved() { }\n        public void OnUpdated(TraitUpdatedArgs e)\n        {\n            e.UpdateDelay = 5f;\n\n            int rnd = new Random().Next(0, 5);\n            if (rnd == 0)\n            {\n                rnd = new Random().Next(3) + 1;\n                Owner.SayDialogue($"Smoker_Cough{rnd}");\n                gc.audioHandler.Play(Owner, VanillaAudio.AgentAnnoyed);\n\n                Noise noise = gc.spawnerMain.SpawnNoise(Owner.tr.position, 1f, Owner, "Attract", Owner);\n                noise.distraction = true;\n            }\n        }\n    }\n}\n',u={},d="Creating a Custom Trait",m={unversionedId:"dev/traits/create-trait",id:"dev/traits/create-trait",title:"Creating a Custom Trait",description:"RogueLibs provides classes and methods to create custom traits, and an interface to make traits updateable. Just like items, custom traits derive from a hook class, CustomTrait, and their functionality can be expanded with interfaces: ITraitUpdateable, just one in this case. If you want the trait to have some kind of a passive effect, then you might need to patch that in yourself.",source:"@site/docs/dev/traits/create-trait.mdx",sourceDirName:"dev/traits",slug:"/dev/traits/create-trait",permalink:"/RogueLibs/docs/dev/traits/create-trait",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/traits/create-trait.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Targetable Abilities",permalink:"/RogueLibs/docs/dev/items/abilities/targetable-abilities"},next:{title:"Creating a Custom Effect",permalink:"/RogueLibs/docs/dev/traits/create-effect"}},c={},p=[{value:"<code>CustomTrait</code> class",id:"customtrait",level:2},{value:"Updating",id:"updating",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Unlock Properties",id:"unlock-properties",level:2},{value:"Examples",id:"examples",level:2}],h={toc:p},k="wrapper";function g(e){let{components:t,...a}=e;return(0,i.kt)(k,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-a-custom-trait"},"Creating a Custom Trait"),(0,i.kt)("p",null,"RogueLibs provides classes and methods to create custom traits, and an interface to make traits updateable. Just like items, custom traits derive from a hook class, ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomTrait"),", and their functionality can be expanded with interfaces: ",(0,i.kt)("inlineCode",{parentName:"p"},"ITraitUpdateable"),", just one in this case. If you want the trait to have some kind of a passive effect, then you might need to patch that in yourself."),(0,i.kt)("h2",{id:"customtrait"},(0,i.kt)("inlineCode",{parentName:"h2"},"CustomTrait")," class"),(0,i.kt)("p",null,"To make a custom trait, you need to create a class deriving from ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomTrait"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"// highlight-next-line\npublic class MyCustomTrait : CustomTrait\n{\n    /* ... */\n}\n")),(0,i.kt)("p",null,"There are 2 methods that you need to implement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"public class MyCustomTrait : CustomTrait\n{\n    // highlight-start\n    public override void OnAdded() { /* ... */ }\n    public override void OnRemoved() { /* ... */ }\n    // highlight-end\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnAdded")," is called when the trait is added to a character, and ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRemoved")," is called when it's removed from a character."),(0,i.kt)("h2",{id:"updating"},"Updating"),(0,i.kt)("p",null,"You can make your trait updateable by implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"ITraitUpdateable")," interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"public class MyCustomTrait : CustomTrait, ITraitUpdateable\n{\n    public void OnUpdated(TraitUpdatedArgs e) { /* ... */ }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnUpdated")," works like Unity's ",(0,i.kt)("inlineCode",{parentName:"p"},"Update"),", but with a settable interval (default is 1 second):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"    public void OnUpdated(TraitUpdatedArgs e)\n    {\n        // highlight-next-line\n        e.UpdateDelay = 0.5f; // 2 updates per second\n        /* ... */\n    }\n")),(0,i.kt)("h2",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Just call the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateCustomTrait")," method with your trait's type as a parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"public class MyCustomTrait : CustomTrait\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        // highlight-next-line\n        RogueLibs.CreateCustomTrait<MyCustomTrait>();\n    }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"See more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"RLSetup")," attribute ",(0,i.kt)("a",{parentName:"p",href:"../patching-utilities#rlsetup"},"here"),".")),(0,i.kt)("p",null,"You can set your trait's name and description using ",(0,i.kt)("inlineCode",{parentName:"p"},"WithName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WithDescription")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},'public class MyCustomTrait : CustomTrait\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        RogueLibs.CreateCustomTrait<MyCustomTrait>()\n            // highlight-start\n            .WithName(new CustomNameInfo("My Custom Trait"))\n            .WithDescription(new CustomNameInfo("My Custom Trait is very cool and does a lot of great stuff"));\n            // highlight-end\n    }\n}\n')),(0,i.kt)("p",null,"You can do the same with sprites and unlocks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},'public class MyCustomTrait : CustomTrait\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        RogueLibs.CreateCustomTrait<MyCustomTrait>()\n            .WithName(new CustomNameInfo("My Custom Trait"))\n            .WithDescription(new CustomNameInfo("My Custom Trait is very cool and does a lot of great stuff"))\n            // highlight-start\n            // the sprite will be displayed only in the menus (optional)\n            .WithSprite(Properties.Resources.MyCustomTrait)\n            .WithUnlock(new TraitUnlock { UnlockCost = 10, CharacterCreationCost = 5 });\n            // highlight-end\n    }\n}\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"../names/custom-names"},"Custom Names"),", ",(0,i.kt)("a",{parentName:"p",href:"../custom-sprites"},"Custom Sprites")," for more info.")),(0,i.kt)("h2",{id:"unlock-properties"},"Unlock Properties"),(0,i.kt)("p",null,"You can use the following properties when initializing ",(0,i.kt)("inlineCode",{parentName:"p"},"TraitUnlock"),"s:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UnlockCost")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},"Unlock cost of the trait, in nuggets. If set to 0, it will unlock automatically, once all prerequisites are unlocked.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CharacterCreationCost")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1")),(0,i.kt)("td",{parentName:"tr",align:null},"Cost of the trait in Character Creation, in points.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"IsAvailable")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Determines whether the trait is available in the Traits menu and on level-ups. If the trait is negative, set it to ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"IsAvailableInCC")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Determines whether the trait is available in the Character Creation menu.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Cancellations")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Determines what traits cannot co-exist with this trait.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Prerequisites")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Determines what unlocks must be unlocked in order to unlock this trait.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Recommendations")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Just shows these unlocks in a separate Recommendations paragraph in the menus.")))),(0,i.kt)("p",null,"Other properties should not be used during initialization."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)(r.Z,{defaultValue:"smoker",values:[{label:"Smoker",value:"smoker"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"smoker",mdxType:"TabItem"},(0,i.kt)(o.Z,{mdxType:"CodeSnippet"},s))))}g.isMDXComponent=!0}}]);