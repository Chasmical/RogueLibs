"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7863],{4214:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),i=n(814);function s(e){let{children:t,language:n}=e;return a.createElement(i.Z,{className:"language-"+(n||"csharp")},t.replace(/\t/g,"    "))}},1016:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7462),i=n(7294);function s(e){let{children:t,...n}=e;return i.createElement("div",(0,a.Z)({role:"tabpanel"},n),t)}},250:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7294),i=n(7094),s=n(6010);const o="tabItem_V91s",r="tabItemActive_JsUu",c="tab_ntnM";const l=37,f=39;function d(e){const{lazy:t,defaultValue:n,values:d,groupId:u}=e,{tabGroupChoices:m,setTabGroupChoices:p}=(0,i.U)(),[h,k]=(0,a.useState)(n),g=a.Children.toArray(e.children),v=[];if(null!=u){const e=m[u];null!=e&&e!==h&&d.some((t=>t.value===e))&&k(e)}const C=e=>{const t=e.currentTarget,n=v.indexOf(t),a=d[n].value;k(a),null!=u&&(p(u,a),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:a,right:i}=e.getBoundingClientRect(),{innerHeight:s,innerWidth:o}=window;return t>=0&&i<=o&&a<=s&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(r),setTimeout((()=>t.classList.remove(r)),2e3))}),150))},b=e=>{let t;switch(e.keyCode){case f:{const n=v.indexOf(e.target)+1;t=v[n]||v[0];break}case l:{const n=v.indexOf(e.target)-1;t=v[n]||v[v.length-1];break}default:return}t.focus()},E=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},d.map((e=>{let{value:t,label:n}=e;return a.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:(0,s.Z)("tabs__item",o,{"tabs__item--active":h===t}),key:t,ref:e=>e&&v.push(e),onKeyDown:b,onFocus:C,onClick:C},n)}))),t?a.cloneElement(g.find((e=>E(h,e.props))),{className:c}):a.createElement("div",null,g.map(((e,t)=>a.cloneElement(e,{key:t,hidden:!E(h,e.props),className:c})))),a.createElement("br",null))}},5600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>f,toc:()=>u});var a=n(7462),i=(n(7294),n(3905)),s=n(250),o=n(1016),r=(n(4996),n(4214));const c={},l="Creating a Custom Effect",f={unversionedId:"dev/traits/create-effect",id:"dev/traits/create-effect",title:"Creating a Custom Effect",description:"RogueLibs provides classes and methods to create custom effects, and an interface to make status effects updateable. Just like items and traits, custom effects derive from a hook class, CustomEffect. If you want the effect to have some kind of a passive effect, then you might need to patch that in yourself.",source:"@site/docs/dev/traits/create-effect.mdx",sourceDirName:"dev/traits",slug:"/dev/traits/create-effect",permalink:"/RogueLibs/docs/dev/traits/create-effect",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/traits/create-effect.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Creating a Custom Trait",permalink:"/RogueLibs/docs/dev/traits/create-trait"},next:{title:"Creating a Custom Interaction",permalink:"/RogueLibs/docs/dev/interactions/create-interaction"}},d={},u=[{value:"<code>CustomEffect</code> class",id:"customeffect",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Examples",id:"examples",level:2}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-a-custom-effect"},"Creating a Custom Effect"),(0,i.kt)("p",null,"RogueLibs provides classes and methods to create custom effects, and an interface to make status effects updateable. Just like items and traits, custom effects derive from a hook class, ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomEffect"),". If you want the effect to have some kind of a passive effect, then you might need to patch that in yourself."),(0,i.kt)("h2",{id:"customeffect"},(0,i.kt)("inlineCode",{parentName:"h2"},"CustomEffect")," class"),(0,i.kt)("p",null,"To make a custom effect, you need to create a class deriving from ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomEffect"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomEffect.cs"',title:'"MyCustomEffect.cs"'},"// highlight-next-line\npublic class MyCustomEffect : CustomEffect\n{\n    /* ... */\n}\n")),(0,i.kt)("p",null,"There are 5 methods that you need to implement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomEffect.cs"',title:'"MyCustomEffect.cs"'},"public class MyCustomEffect : CustomEffect\n{\n    // highlight-start\n    public override int GetEffectTime() { /* ... */ }\n    public override int GetEffectHate() { /* ... */ }\n    public override void OnAdded() { /* ... */ }\n    public override void OnRemoved() { /* ... */ }\n    public override void OnUpdated(EffectUpdatedArgs e) { /* ... */ }\n    // highlight-end\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GetEffectTime"),' determines the default status effect time. Traits like "Longer Status Effects", "Longer Status Effects +" and "Shorter Status Effects" are applied after calling this method.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GetEffectHate")," determines how much hate other characters will get towards the character who inflicted the status effect on them. Usually, it's 5 for negative effects and 0 for positive effects."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"GetEffectTime")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GetEffectHate")," are called on partially initialized hooks, so the effect's owner might not actually have the effect. Do not initialize any effect-specific variables in these methods.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnAdded")," is called when the effect is added to a character, and ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRemoved")," is called when it's removed from a character."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnUpdated")," works like Unity's ",(0,i.kt)("inlineCode",{parentName:"p"},"Update"),", but with a settable interval (default is 1 second):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"    public override void OnUpdated(EffectUpdatedArgs e)\n    {\n        // highlight-next-line\n        e.UpdateDelay = 0.5f; // 2 updates per second\n        /* ... */\n        // highlight-next-line\n        CurrentTime--;\n    }\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You're responsible for decrementing the effect's ",(0,i.kt)("inlineCode",{parentName:"p"},"CurrentTime"),". So, don't forget to do that.")),(0,i.kt)("p",null,"All custom effect classes should have an ",(0,i.kt)("inlineCode",{parentName:"p"},"EffectParameters")," attribute. You can specify whether your effect should be removed on death, on knockout or between levels. Default is ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoveOnDeath"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"[EffectParameters(EffectLimitations.RemoveOnDeath | EffectLimitations.RemoveOnKnockOut)]\npublic class MyCustomEffect : CustomEffect\n{\n    /* ... */\n}\n")),(0,i.kt)("h2",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Just call the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateCustomEffect")," method with your effect's type as a parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomEffect.cs"',title:'"MyCustomEffect.cs"'},"public class MyCustomEffect : CustomEffect\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        // highlight-next-line\n        RogueLibs.CreateCustomEffect<MyCustomEffect>();\n    }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"See more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"RLSetup")," attribute ",(0,i.kt)("a",{parentName:"p",href:"../patching-utilities#rlsetup"},"here"),".")),(0,i.kt)("p",null,"You can set your effect's name and description using ",(0,i.kt)("inlineCode",{parentName:"p"},"WithName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WithDescription")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomEffect.cs"',title:'"MyCustomEffect.cs"'},'public class MyCustomEffect : CustomEffect\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        RogueLibs.CreateCustomEffect<MyCustomEffect>()\n            // highlight-start\n            .WithName(new CustomNameInfo("My Custom Effect"))\n            .WithDescription(new CustomNameInfo("My Custom Effect is very cool and does a lot of great stuff"));\n            // highlight-end\n    }\n}\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"../names/custom-names"},"Custom Names")," for more info.")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)(s.Z,{defaultValue:"adrenaline",values:[{label:"Adrenaline",value:"adrenaline"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"adrenaline",mdxType:"TabItem"},(0,i.kt)("p",null,"A simple effect that just gives a temporary boost to some stats. You can see Adrenaline Shot's (item that gives this effect) implementation in ",(0,i.kt)("a",{parentName:"p",href:"../items/usable-items#examples"},"Usable Items: Examples"),"."),(0,i.kt)(r.Z,{mdxType:"CodeSnippet"},'namespace RogueLibsCore.Test\n{\n    [EffectParameters(EffectLimitations.RemoveOnDeath | EffectLimitations.RemoveOnKnockOut)]\n    public class Adrenaline : CustomEffect\n    {\n        [RLSetup]\n        public static void Setup()\n        {\n            RogueLibs.CreateCustomEffect<Adrenaline>()\n                 .WithName(new CustomNameInfo("Adrenaline"))\n                 .WithDescription(new CustomNameInfo("Gives you a ton of boosts for a short period of time."));\n        }\n\n        public override int GetEffectTime() => 15;\n        public override int GetEffectHate() => 0;\n        public override void OnAdded()\n        {\n            Owner.ChangeHealth(20);\n            Owner.SetStrength(Owner.strengthStatMod + 2);\n            Owner.SetEndurance(Owner.enduranceStatMod + 2);\n            Owner.SetAccuracy(Owner.accuracyStatMod - 1);\n            Owner.SetSpeed(Owner.speedStatMod + 2);\n            Owner.critChance += 30;\n        }\n        public override void OnRemoved()\n        {\n            Owner.SetStrength(Owner.strengthStatMod - 2);\n            Owner.SetEndurance(Owner.enduranceStatMod - 2);\n            Owner.SetAccuracy(Owner.accuracyStatMod + 1);\n            Owner.SetSpeed(Owner.speedStatMod - 2);\n            Owner.critChance -= 30;\n        }\n        public override void OnUpdated(EffectUpdatedArgs e)\n        {\n            e.UpdateDelay = 1f;\n            CurrentTime--;\n        }\n    }\n}\n'))))}p.isMDXComponent=!0}}]);