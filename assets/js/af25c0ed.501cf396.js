"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1590],{4214:(t,e,a)=>{a.d(e,{Z:()=>r});var n=a(7294),i=a(814);function r(t){let{children:e,language:a}=t;return n.createElement(i.Z,{className:"language-"+(a||"csharp")},e.replace(/\t/g,"    "))}},1016:(t,e,a)=>{a.d(e,{Z:()=>r});var n=a(7462),i=a(7294);function r(t){let{children:e,...a}=t;return i.createElement("div",(0,n.Z)({role:"tabpanel"},a),e)}},250:(t,e,a)=>{a.d(e,{Z:()=>d});var n=a(7294),i=a(7094),r=a(6010);const l="tabItem_V91s",o="tabItemActive_JsUu",s="tab_ntnM";const u=37,m=39;function d(t){const{lazy:e,defaultValue:a,values:d,groupId:p}=t,{tabGroupChoices:c,setTabGroupChoices:k}=(0,i.U)(),[h,g]=(0,n.useState)(a),C=n.Children.toArray(t.children),N=[];if(null!=p){const t=c[p];null!=t&&t!==h&&d.some((e=>e.value===t))&&g(t)}const b=t=>{const e=t.currentTarget,a=N.indexOf(e),n=d[a].value;g(n),null!=p&&(k(p,n),setTimeout((()=>{(function(t){const{top:e,left:a,bottom:n,right:i}=t.getBoundingClientRect(),{innerHeight:r,innerWidth:l}=window;return e>=0&&i<=l&&n<=r&&a>=0})(e)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(o),setTimeout((()=>e.classList.remove(o)),2e3))}),150))},T=t=>{let e;switch(t.keyCode){case m:{const a=N.indexOf(t.target)+1;e=N[a]||N[0];break}case u:{const a=N.indexOf(t.target)-1;e=N[a]||N[N.length-1];break}default:return}e.focus()},v=(t,e)=>e.value===t||e.values&&-1!=e.values.indexOf(t);return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},d.map((t=>{let{value:e,label:a}=t;return n.createElement("li",{role:"tab",tabIndex:h===e?0:-1,"aria-selected":h===e,className:(0,r.Z)("tabs__item",l,{"tabs__item--active":h===e}),key:e,ref:t=>t&&N.push(t),onKeyDown:T,onFocus:b,onClick:b},a)}))),e?n.cloneElement(C.find((t=>v(h,t.props))),{className:s}):n.createElement("div",null,C.map(((t,e)=>n.cloneElement(t,{key:e,hidden:!v(h,t.props),className:s})))),n.createElement("br",null))}},7352:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>k,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var n=a(7462),i=(a(7294),a(3905)),r=a(250),l=a(1016),o=(a(4996),a(4214));const s={},u="Creating a Custom Trait",m={unversionedId:"dev/traits/create-trait",id:"dev/traits/create-trait",title:"Creating a Custom Trait",description:"CustomTrait class",source:"@site/docs/dev/traits/create-trait.mdx",sourceDirName:"dev/traits",slug:"/dev/traits/create-trait",permalink:"/RogueLibs/docs/dev/traits/create-trait",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/traits/create-trait.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Targetable Abilities",permalink:"/RogueLibs/docs/dev/items/abilities/targetable-abilities"},next:{title:"Creating a Custom Effect",permalink:"/RogueLibs/docs/dev/traits/create-effect"}},d={},p=[{value:"<code>CustomTrait</code> class",id:"customtrait",level:2},{value:"Updating",id:"updating",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Unlock Properties",id:"unlock-properties",level:2},{value:"Examples",id:"examples",level:2}],c={toc:p};function k(t){let{components:e,...a}=t;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"creating-a-custom-trait"},"Creating a Custom Trait"),(0,i.kt)("h2",{id:"customtrait"},(0,i.kt)("inlineCode",{parentName:"h2"},"CustomTrait")," class"),(0,i.kt)("p",null,"To make a custom trait, you need to create a class deriving from ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomTrait"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"// highlight-next-line\npublic class MyCustomTrait : CustomTrait\n{\n    /* ... */\n}\n")),(0,i.kt)("p",null,"There are 2 methods that you need to implement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"public class MyCustomTrait : CustomTrait\n{\n    // highlight-start\n    public override void OnAdded() { /* ... */ }\n    public override void OnRemoved() { /* ... */ }\n    // highlight-end\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnAdded")," is called when the trait is added to a character, and ",(0,i.kt)("inlineCode",{parentName:"p"},"OnRemoved")," is called when it's removed from a character."),(0,i.kt)("h2",{id:"updating"},"Updating"),(0,i.kt)("p",null,"You can make your trait updateable by implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"ITraitUpdateable")," interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"public class MyCustomTrait : CustomTrait, ITraitUpdateable\n{\n    public void OnUpdated(TraitUpdatedArgs e) { /* ... */ }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnUpdated")," works like Unity's ",(0,i.kt)("inlineCode",{parentName:"p"},"Update"),", but with a settable interval (default is 1 second):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"    public void OnUpdated(TraitUpdatedArgs e)\n    {\n        // highlight-next-line\n        e.UpdateDelay = 0.5f; // 2 updates per second\n        /* ... */\n    }\n")),(0,i.kt)("h2",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Just call the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateCustomTrait")," method with your trait's type as a parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},"public class MyCustomTrait : CustomTrait\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        // highlight-next-line\n        RogueLibs.CreateCustomTrait<MyCustomTrait>();\n    }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"See more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"RLSetup")," attribute ",(0,i.kt)("a",{parentName:"p",href:"../patching-utilities#rlsetup"},"here"),".")),(0,i.kt)("p",null,"You can set your trait's name and description using ",(0,i.kt)("inlineCode",{parentName:"p"},"WithName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WithDescription")," methods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},'public class MyCustomTrait : CustomTrait\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        RogueLibs.CreateCustomTrait<MyCustomTrait>()\n            // highlight-start\n            .WithName(new CustomNameInfo("My Custom Trait"))\n            .WithDescription(new CustomNameInfo("My Custom Trait is very cool and does a lot of great stuff"));\n            // highlight-end\n    }\n}\n')),(0,i.kt)("p",null,"You can do the same with sprites and unlocks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomTrait.cs"',title:'"MyCustomTrait.cs"'},'public class MyCustomTrait : CustomTrait\n{\n    [RLSetup]\n    public static void Setup()\n    {\n        RogueLibs.CreateCustomTrait<MyCustomTrait>()\n            .WithName(new CustomNameInfo("My Custom Trait"))\n            .WithDescription(new CustomNameInfo("My Custom Trait is very cool and does a lot of great stuff"))\n            // highlight-start\n            // the sprite will be displayed only in the menus (optional)\n            .WithSprite(Properties.Resources.MyCustomTrait)\n            .WithUnlock(new TraitUnlock { UnlockCost = 10, CharacterCreationCost = 5 });\n            // highlight-end\n    }\n}\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"../names/custom-names"},"Custom Names"),", ",(0,i.kt)("a",{parentName:"p",href:"../custom-sprites"},"Custom Sprites")," for more info.")),(0,i.kt)("h2",{id:"unlock-properties"},"Unlock Properties"),(0,i.kt)("p",null,"You can use the following properties when initializing ",(0,i.kt)("inlineCode",{parentName:"p"},"TraitUnlock"),"s:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"UnlockCost")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},"Unlock cost of the trait, in nuggets. If set to 0, it will unlock automatically, once all prerequisites are unlocked.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CharacterCreationCost")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1")),(0,i.kt)("td",{parentName:"tr",align:null},"Cost of the trait in Character Creation, in points.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"IsAvailable")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Determines whether the trait is available in the Traits menu and on level-ups. If the trait is negative, set it to ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"IsAvailableInCC")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Determines whether the trait is available in the Character Creation menu.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Cancellations")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Determines what traits cannot co-exist with this trait.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Prerequisites")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Determines what unlocks must be unlocked in order to unlock this trait.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Recommendations")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Just shows these unlocks in a separate Recommendations paragraph in the menus.")))),(0,i.kt)("p",null,"Other properties should not be used during initialization."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)(r.Z,{defaultValue:"smoker",values:[{label:"Smoker",value:"smoker"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"smoker",mdxType:"TabItem"},(0,i.kt)(o.Z,{mdxType:"CodeSnippet"},'using System;\n\nnamespace RogueLibsCore.Test\n{\n    public class Smoker : CustomTrait, ITraitUpdateable\n    {\n        [RLSetup]\n        public static void Setup()\n        {\n            RogueLibs.CreateCustomTrait<Smoker>()\n                .WithName(new CustomNameInfo("Smoker"))\n                .WithDescription(new CustomNameInfo("Randomly cough, alerting enemies"))\n                .WithUnlock(new TraitUnlock { CharacterCreationCost = -4 });\n\n            RogueLibs.CreateCustomName("Smoker_Cough1", NameTypes.Dialogue, new CustomNameInfo("*Cough*"));\n            RogueLibs.CreateCustomName("Smoker_Cough2", NameTypes.Dialogue, new CustomNameInfo("*Cough* *CouGH*"));\n            RogueLibs.CreateCustomName("Smoker_Cough3", NameTypes.Dialogue, new CustomNameInfo("*coUGH* *COUgh*"));\n        }\n\n        public override void OnAdded() { }\n        public override void OnRemoved() { }\n        public void OnUpdated(TraitUpdatedArgs e)\n        {\n            e.UpdateDelay = 5f;\n\n            int rnd = new Random().Next(0, 5);\n            if (rnd == 0)\n            {\n                rnd = new Random().Next(3) + 1;\n                Owner.SayDialogue($"Smoker_Cough{rnd}");\n                gc.audioHandler.Play(Owner, VanillaAudio.AgentAnnoyed);\n\n                Noise noise = gc.spawnerMain.SpawnNoise(Owner.tr.position, 1f, Owner, "Attract", Owner);\n                noise.distraction = true;\n            }\n        }\n    }\n}\n'))))}k.isMDXComponent=!0}}]);