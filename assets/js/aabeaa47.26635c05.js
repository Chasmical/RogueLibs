"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4808],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,h=d["".concat(s,".").concat(p)]||d[p]||m[p]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1016:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7462),r=n(7294);function l(e){let{children:t,...n}=e;return r.createElement("div",(0,a.Z)({role:"tabpanel"},n),t)}},5878:(e,t,n)=>{n.d(t,{Z:()=>g});var a=n(7294),r=n(6550),l=n(1980),i=n(7392),o=n(12);function s(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??s(n);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const i=(0,r.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(i.location.search);t.set(o,e),i.replace({...i.location,search:t.toString()})}),[o,i])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=u(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[m,p]=d({queryString:n,groupId:r}),[h,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,o.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),g=(()=>{const e=m??h;return c({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!c({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),k(e)}),[p,k,l]),tabValues:l}}var p=n(6010);const h={tabItem:"tabItem_V91s",tabItemActive:"tabItemActive_JsUu",blink:"blink_ZPVS",tab:"tab_ntnM"};const k={left:37,right:39};function g(e){const{lazy:t,defaultValue:n,values:r,groupId:l}=e,i=a.Children.toArray(e.children),{tabValues:o,selectedValue:s,selectValue:u}=m({children:i,defaultValue:n,values:r,groupId:l}),c=[],d=e=>{const t=e.currentTarget,n=r[c.indexOf(t)].value;u(n),null!=l&&setTimeout((()=>{(function(e){const{top:t,left:n,bottom:a,right:r}=e.getBoundingClientRect(),{innerHeight:l,innerWidth:i}=window;return t>=0&&r<=i&&a<=l&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(h.tabItemActive),setTimeout((()=>t.classList.remove(h.tabItemActive)),2e3))}),150)},g=e=>{let t;switch(e.keyCode){case k.right:{const n=c.indexOf(e.target)+1;t=c[n]||c[0];break}case k.left:{const n=c.indexOf(e.target)-1;t=c[n]||c[c.length-1];break}default:return}t.focus()},b=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},r.map((e=>{let{value:t,label:n}=e;return a.createElement("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,className:(0,p.Z)("tabs__item",h.tabItem,{"tabs__item--active":s===t}),key:t,ref:e=>e&&c.push(e),onKeyDown:g,onFocus:d,onClick:d},n)}))),t?a.cloneElement(i.find((e=>b(s,e.props))),{className:h.tab}):a.createElement("div",null,i.map(((e,t)=>a.cloneElement(e,{key:t,hidden:!b(s,e.props),className:h.tab})))),a.createElement("br",null))}},6582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));n(5878),n(1016),n(4996);const l={},i="Inventory Checks",o={unversionedId:"dev/items/inventory-checks",id:"dev/items/inventory-checks",title:"Inventory Checks",description:"Custom usable items might have varying restrictions, and it will be hard to enforce a consistent standard for that kind of stuff. That's why RogueLibs introduces special inventory checks, that will run before and after any usable/combinable/targetable items in the game. You can use these checks to prevent the item's intended function, or maybe somehow augment it.",source:"@site/docs/dev/items/inventory-checks.mdx",sourceDirName:"dev/items",slug:"/dev/items/inventory-checks",permalink:"/RogueLibs/docs/dev/items/inventory-checks",draft:!1,editUrl:"https://github.com/Chasmical/RogueLibs/edit/main/website/docs/dev/items/inventory-checks.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Custom Projectiles*",permalink:"/RogueLibs/docs/dev/items/weapons/custom-projectiles"},next:{title:"Creating a Custom Ability",permalink:"/RogueLibs/docs/dev/items/abilities/create-ability"}},s={},u=[{value:"<code>InventoryChecks</code>",id:"inventorychecks",level:2},{value:"Ignoring inventory checks",id:"ignoring-checks",level:2},{value:"Adding inventory checks",id:"adding-checks",level:2},{value:"Table of default checks",id:"default-checks",level:2},{value:"<code>IItemUsable</code> checks",id:"iitemusable-checks",level:3},{value:"<code>IItemCombinable</code> checks",id:"iitemcombinable-checks",level:3},{value:"<code>IItemTargetable</code> checks",id:"iitemtargetable-checks",level:3}],c={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inventory-checks"},"Inventory Checks"),(0,r.kt)("p",null,"Custom usable items might have varying restrictions, and it will be hard to enforce a consistent standard for that kind of stuff. That's why RogueLibs introduces special ",(0,r.kt)("strong",{parentName:"p"},"inventory checks"),", that will run before and after any usable/combinable/targetable items in the game. You can use these checks to prevent the item's intended function, or maybe somehow augment it."),(0,r.kt)("h2",{id:"inventorychecks"},(0,r.kt)("inlineCode",{parentName:"h2"},"InventoryChecks")),(0,r.kt)("p",null,"With inventory checks, you can omit code like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'if (Owner.statusEffects.hasTrait("BloodRestoresHealth"))\n{\n    Owner.SayDialogue("WontEatThis");\n    return;\n}\nif (Owner.statusEffects.hasTrait("OilRestoresHealth"))\n{\n    Owner.SayDialogue("WontEatThat");\n    return;\n}\nif (Owner.health == Owner.maxHealth)\n{\n    Owner.SayDialogue("NoImFull");\n    return;\n}\n...\n')),(0,r.kt)("p",null,"These inventory checks can also implement some common side effects, that modders sometimes forget to implement. For example, removing an item from the inventory or stopping the interaction, when the item's count reaches 0 (RogueLibs provides these checks)."),(0,r.kt)("h2",{id:"ignoring-checks"},"Ignoring inventory checks"),(0,r.kt)("p",null,"Inventory checks can be ignored by using an ",(0,r.kt)("inlineCode",{parentName:"p"},"IgnoreChecks")," attribute."),(0,r.kt)("p",null,"You can put ",(0,r.kt)("inlineCode",{parentName:"p"},"IgnoreChecks")," attributes on your item's class or on any of the interface methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ItemCategories(RogueCategories.Food, RogueCategories.Weird, "Meat")]\npublic class MysteryFood : CustomItem, IItemUsable\n{\n    // highlight-next-line\n    [IgnoreChecks("VegetarianCheck")]\n    public bool UseItem()\n    {\n        e.User.ChangeHealth(Item.healthChange);\n        Count--;\n        e.User.Say("Huh, tasty. I wonder what that was..."); // O_o\n        return true;\n    }\n}\n')),(0,r.kt)("p",null,"See the table of inventory checks implemented by RogueLibs ",(0,r.kt)("a",{parentName:"p",href:"#default-checks"},"later on this page"),"."),(0,r.kt)("h2",{id:"adding-checks"},"Adding inventory checks"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RogueEventArgs")," class has two properties: ",(0,r.kt)("inlineCode",{parentName:"p"},"Cancel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Handled"),". If you set ",(0,r.kt)("inlineCode",{parentName:"p"},"Handled")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", then all other checks will be skipped. If you set ",(0,r.kt)("inlineCode",{parentName:"p"},"Cancel")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", then the action that was going to happen will not happen. Usually, they are set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," at the same time."),(0,r.kt)("p",null,"For example, there's a trait called ",(0,r.kt)("inlineCode",{parentName:"p"},'"Vegetarian"')," that should prohibit the player from consuming food with ",(0,r.kt)("inlineCode",{parentName:"p"},'"Meat"')," category:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'InventoryChecks.AddItemUsingCheck("VegetarianCheck", VegetarianCheck);\n...\npublic static void VegetarianCheck(OnItemUsingArgs e)\n{\n    if (e.Item.itemType == ItemTypes.Food && e.User.HasTrait("Vegetarian") && e.Item.Categories.Contains("Meat"))\n    {\n        // do something to indicate why the item cannot be used\n        e.User.gc.audioHandler.Play(e.User, "CantDo");\n        e.User.SayDialogue("WontEatMeat");\n        // set Cancel and Handled to true\n        e.Cancel = e.Handled = true;\n    }\n};\n')),(0,r.kt)("p",null,"If you want to override an inventory check from another mod, then you'll have to patch it with Harmony."),(0,r.kt)("h2",{id:"default-checks"},"Table of default checks"),(0,r.kt)("h3",{id:"iitemusable-checks"},(0,r.kt)("inlineCode",{parentName:"h3"},"IItemUsable")," checks"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Criteria"),(0,r.kt)("th",{parentName:"tr",align:null},"Dialogue"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Ghost")),(0,r.kt)("td",{parentName:"tr",align:null},"Player is a ghost."),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PeaBrained")),(0,r.kt)("td",{parentName:"tr",align:null},'"Pea-Brained" trait, ',(0,r.kt)("strong",{parentName:"td"},"NOT")," Food type."),(0,r.kt)("td",{parentName:"tr",align:null},'"GRRRRRRRR!!!!!"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OnlyOil")),(0,r.kt)("td",{parentName:"tr",align:null},'"Oil Reliant" trait, Food type and (Food or Alcohol category).'),(0,r.kt)("td",{parentName:"tr",align:null},'"I\'m gonna need some oil..."')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OnlyOilMedicine")),(0,r.kt)("td",{parentName:"tr",align:null},'"Oil Reliant" trait, Consumable type and Health category.'),(0,r.kt)("td",{parentName:"tr",align:null},'"I\'m gonna need some oil..."')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OnlyBlood")),(0,r.kt)("td",{parentName:"tr",align:null},'"Jugularious" trait, Food type and (Food or Alcohol category).'),(0,r.kt)("td",{parentName:"tr",align:null},'"Ew gross, I\'m not putting that in my mouth!"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OnlyBloodMedicine")),(0,r.kt)("td",{parentName:"tr",align:null},'"Jugularious" trait, Consumable type and Health category.'),(0,r.kt)("td",{parentName:"tr",align:null},'"Modern medicine is for humans, I want BLOOD!"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OnlyCharge")),(0,r.kt)("td",{parentName:"tr",align:null},'"Electronic" trait, Food type and Food category.'),(0,r.kt)("td",{parentName:"tr",align:null},'"I don\'t exactly have a stomach."')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OnlyHumanFlesh")),(0,r.kt)("td",{parentName:"tr",align:null},'"Strict Cannibal" trait, Food type and Food category.'),(0,r.kt)("td",{parentName:"tr",align:null},'"Ew gross, I\'m not putting that in my mouth!"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FullHealth")),(0,r.kt)("td",{parentName:"tr",align:null},"Player's health is full and the item's ",(0,r.kt)("inlineCode",{parentName:"td"},"healthChange")," is greater than 0."),(0,r.kt)("td",{parentName:"tr",align:null},"\"No need, I'm feelin' good!\"")))),(0,r.kt)("p",null,"These checks are exposed via ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultInventoryChecks"),". The rest are implemented inside RogueLibs' patches."),(0,r.kt)("h3",{id:"iitemcombinable-checks"},(0,r.kt)("inlineCode",{parentName:"h3"},"IItemCombinable")," checks"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Criteria"),(0,r.kt)("th",{parentName:"tr",align:null},"What will happen"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AutoStacking")),(0,r.kt)("td",{parentName:"tr",align:null},"Items have the same name"),(0,r.kt)("td",{parentName:"tr",align:null},"They will be highlighted, and once combined, they will be stacked together")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StopOnZero")),(0,r.kt)("td",{parentName:"tr",align:null},"The current item's count is 0, or it's no longer in the inventory"),(0,r.kt)("td",{parentName:"tr",align:null},"Interaction/combining will be stopped")))),(0,r.kt)("h3",{id:"iitemtargetable-checks"},(0,r.kt)("inlineCode",{parentName:"h3"},"IItemTargetable")," checks"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Criteria"),(0,r.kt)("th",{parentName:"tr",align:null},"What will happen"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Distance")),(0,r.kt)("td",{parentName:"tr",align:null},"The target object is over 15 units away"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ButlerBot")),(0,r.kt)("td",{parentName:"tr",align:null},"The target is a Butler Bot"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"EmptyMech")),(0,r.kt)("td",{parentName:"tr",align:null},"The target is an Empty Mech"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StopOnZero")),(0,r.kt)("td",{parentName:"tr",align:null},"The current item's count is 0, or it's no longer in the inventory"),(0,r.kt)("td",{parentName:"tr",align:null},"Interaction/targeting will be stopped")))))}m.isMDXComponent=!0}}]);