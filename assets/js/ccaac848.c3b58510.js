"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8320],{7237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(5893),a=n(1151);n(5878),n(1016),n(4996);const o={},i="Custom Name Providers",s={id:"dev/names/name-providers",title:"Custom Name Providers",description:"If you have some kind of a complicated localization logic, then you might want to create your own INameProvider. This way you can control what strings are returned by NameDB.GetName in a more generic way. You can even hook up your localization provider, if you don't like the localization system provided by RogueLibs.",source:"@site/docs/dev/names/name-providers.mdx",sourceDirName:"dev/names",slug:"/dev/names/name-providers",permalink:"/RogueLibs/docs/dev/names/name-providers",draft:!1,unlisted:!1,editUrl:"https://github.com/Chasmical/RogueLibs/edit/main/website/docs/dev/names/name-providers.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Custom Languages*",permalink:"/RogueLibs/docs/dev/names/custom-languages"},next:{title:"Custom Sprites and Resources",permalink:"/RogueLibs/docs/dev/custom-sprites"}},l={},u=[{value:"<code>INameProvider</code> interface",id:"inameprovider",level:2}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"custom-name-providers",children:"Custom Name Providers"}),"\n",(0,r.jsxs)(t.p,{children:["If you have some kind of a complicated localization logic, then you might want to create your own ",(0,r.jsx)(t.code,{children:"INameProvider"}),". This way you can control what strings are returned by ",(0,r.jsx)(t.code,{children:"NameDB.GetName"})," in a more generic way. You can even hook up your localization provider, if you don't like the localization system provided by RogueLibs."]}),"\n","\n","\n",(0,r.jsxs)(t.h2,{id:"inameprovider",children:[(0,r.jsx)(t.code,{children:"INameProvider"})," interface"]}),"\n",(0,r.jsxs)(t.p,{children:["Just create a class implementing ",(0,r.jsx)(t.code,{children:"INameProvider"})," and add it to ",(0,r.jsx)(t.code,{children:"RogueFramework"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="MyNameProvider.cs"',children:'public class MyNameProvider : INameProvider\n{\n    public void GetName(string name, string type, ref string? result)\n    {\n        if (name.StartsWith("fake_"))\n        {\n            string sub = name.Substring("fake_".Length);\n            result = LanguageService.NameDB.GetName(sub, type);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["If the original ",(0,r.jsx)(t.code,{children:"NameDB.GetName"})," returned an error string (with ",(0,r.jsx)(t.code,{children:"E_"})," prefix), ",(0,r.jsx)(t.code,{children:"result"})," is set to ",(0,r.jsx)(t.code,{children:"null"}),"."]})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"RogueFramework.NameProviders.Add(new MyNameProvider());\n"})}),"\n",(0,r.jsx)(t.p,{children:"Here's a more practical and useful example, that is already implemented in RogueLibs:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'public class DialogueNameProvider : INameProvider\n{\n\tpublic void GetName(string name, string type, ref string? result)\n\t{\n\t\tif (result is null && type == "Dialogue" && name.StartsWith("NA_"))\n\t\t{\n\t\t\tstring sub = name.Substring("NA_".Length);\n\t\t\tstring newResult = LanguageService.NameDB.GetName(sub, type);\n\t\t\tif (!newResult.StartsWith("E_")) result = newResult;\n\t\t}\n\t}\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Normally, the game looks for dialogue names of the following format: ",(0,r.jsx)(t.code,{children:"<AgentName>_<DialogueName>"}),". If such a name doesn't exist, then ",(0,r.jsx)(t.code,{children:"NA_<DialogueName>"})," (NA - No Agent) is used instead. This name provider will also look for a name with just the dialogue name. This allows the developers to write dialogue names without that annoying and often confusing ",(0,r.jsx)(t.code,{children:"NA_"})," prefix."]})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1016:(e,t,n)=>{n.d(t,{Z:()=>a});n(7294);var r=n(5893);function a(e){let{children:t,...n}=e;return(0,r.jsx)("div",{role:"tabpanel",...n,children:t})}},5878:(e,t,n)=>{n.d(t,{Z:()=>b});var r=n(7294),a=n(6550),o=n(469),i=n(1980),s=n(7392),l=n(12);function u(e){return function(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,a.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=c(e),[s,u]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[h,p]=m({queryString:n,groupId:a}),[f,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,l.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=h??f;return d({value:e,tabValues:i})?e:null})();(0,o.Z)((()=>{g&&u(g)}),[g]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);u(e),p(e),v(e)}),[p,v,i]),tabValues:i}}var p=n(512);const f={tabItem:"tabItem_V91s",tabItemActive:"tabItemActive_JsUu",blink:"blink_ZPVS",tab:"tab_ntnM"};var v=n(5893);const g={left:37,right:39};function b(e){const{lazy:t,defaultValue:n,values:a,groupId:o}=e,i=r.Children.toArray(e.children),{tabValues:s,selectedValue:l,selectValue:u}=h({children:i,defaultValue:n,values:a,groupId:o}),c=[],d=e=>{const t=e.currentTarget,n=a[c.indexOf(t)].value;u(n),null!=o&&setTimeout((()=>{(function(e){const{top:t,left:n,bottom:r,right:a}=e.getBoundingClientRect(),{innerHeight:o,innerWidth:i}=window;return t>=0&&a<=i&&r<=o&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(f.tabItemActive),setTimeout((()=>t.classList.remove(f.tabItemActive)),2e3))}),150)},m=e=>{let t;switch(e.keyCode){case g.right:{const n=c.indexOf(e.target)+1;t=c[n]||c[0];break}case g.left:{const n=c.indexOf(e.target)-1;t=c[n]||c[c.length-1];break}default:return}t.focus()},b=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return(0,v.jsxs)("div",{className:"tabs-container",children:[(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs",children:a.map((e=>{let{value:t,label:n}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,className:(0,p.Z)("tabs__item",f.tabItem,{"tabs__item--active":l===t}),ref:e=>e&&c.push(e),onKeyDown:m,onFocus:d,onClick:d,children:n},t)}))}),t?r.cloneElement(i.find((e=>b(l,e.props))),{className:f.tab}):(0,v.jsx)("div",{children:i.map(((e,t)=>r.cloneElement(e,{key:t,hidden:!b(l,e.props),className:f.tab})))}),(0,v.jsx)("br",{})]})}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>i});var r=n(7294);const a={},o=r.createContext(a);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);