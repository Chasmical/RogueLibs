"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6634],{4214:(e,t,o)=>{o.d(t,{Z:()=>r});var n=o(7294),a=o(614);function r(e){let{children:t,language:o}=e;return n.createElement(a.Z,{className:"language-"+(o||"csharp")},t.replace(/\t/g,"    "))}},1016:(e,t,o)=>{o.d(t,{Z:()=>r});var n=o(7462),a=o(7294);function r(e){let{children:t,...o}=e;return a.createElement("div",(0,n.Z)({role:"tabpanel"},o),t)}},5878:(e,t,o)=>{o.d(t,{Z:()=>b});var n=o(7294),a=o(6550),r=o(1980),s=o(7392),i=o(12);function l(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:o,attributes:n,default:a}}=e;return{value:t,label:o,attributes:n,default:a}}))}function u(e){const{values:t,children:o}=e;return(0,n.useMemo)((()=>{const e=t??l(o);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,o])}function c(e){let{value:t,tabValues:o}=e;return o.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:o}=e;const s=(0,a.k6)(),i=function(e){let{queryString:t=!1,groupId:o}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:t,groupId:o});return[(0,r._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function d(e){const{defaultValue:t,queryString:o=!1,groupId:a}=e,r=u(e),[s,l]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:o}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${o.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=o.find((e=>e.default))??o[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[d,p]=m({queryString:o,groupId:a}),[h,k]=function(e){let{groupId:t}=e;const o=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,i.Nk)(o);return[a,(0,n.useCallback)((e=>{o&&r.set(e)}),[o,r])]}({groupId:a}),b=(()=>{const e=d??h;return c({value:e,tabValues:r})?e:null})();(0,n.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!c({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),k(e)}),[p,k,r]),tabValues:r}}var p=o(6010);const h={tabItem:"tabItem_V91s",tabItemActive:"tabItemActive_JsUu",blink:"blink_ZPVS",tab:"tab_ntnM"};const k={left:37,right:39};function b(e){const{lazy:t,defaultValue:o,values:a,groupId:r}=e,s=n.Children.toArray(e.children),{tabValues:i,selectedValue:l,selectValue:u}=d({children:s,defaultValue:o,values:a,groupId:r}),c=[],m=e=>{const t=e.currentTarget,o=a[c.indexOf(t)].value;u(o),null!=r&&setTimeout((()=>{(function(e){const{top:t,left:o,bottom:n,right:a}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:s}=window;return t>=0&&a<=s&&n<=r&&o>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(h.tabItemActive),setTimeout((()=>t.classList.remove(h.tabItemActive)),2e3))}),150)},b=e=>{let t;switch(e.keyCode){case k.right:{const o=c.indexOf(e.target)+1;t=c[o]||c[0];break}case k.left:{const o=c.indexOf(e.target)-1;t=c[o]||c[c.length-1];break}default:return}t.focus()},f=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},a.map((e=>{let{value:t,label:o}=e;return n.createElement("li",{role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,className:(0,p.Z)("tabs__item",h.tabItem,{"tabs__item--active":l===t}),key:t,ref:e=>e&&c.push(e),onKeyDown:b,onFocus:m,onClick:m},o)}))),t?n.cloneElement(s.find((e=>f(l,e.props))),{className:h.tab}):n.createElement("div",null,s.map(((e,t)=>n.cloneElement(e,{key:t,hidden:!f(l,e.props),className:h.tab})))),n.createElement("br",null))}},3528:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>u,metadata:()=>m,toc:()=>p});var n=o(7462),a=(o(7294),o(3905)),r=o(5878),s=o(1016),i=(o(4996),o(4214)),l=o(5306);const u={},c="Hooks",m={unversionedId:"dev/hooks/hooks",id:"dev/hooks/hooks",title:"Hooks",description:'A hook is an object that is attached to another object ("hook" is a really vague word, jsyk). In RogueLibs hook types derive from IHook and IHook, and RogueLibs provides a mechanism to attach these hooks to vanilla types, such as InvItem, PlayfieldObject, Unlock, Trait and etc. Most custom content classes are based on hooks in one way or another.',source:"@site/docs/dev/hooks/hooks.mdx",sourceDirName:"dev/hooks",slug:"/dev/hooks/",permalink:"/RogueLibs/docs/dev/hooks/",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/hooks/hooks.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Patching Utilities",permalink:"/RogueLibs/docs/dev/patching-utilities"},next:{title:"Hook Factories",permalink:"/RogueLibs/docs/dev/hooks/hook-factories"}},d={},p=[{value:"<code>IHook</code> interface",id:"ihook",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}],h={toc:p},k="wrapper";function b(e){let{components:t,...o}=e;return(0,a.kt)(k,(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hooks"},"Hooks"),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"hook"),' is an object that is attached to another object ("hook" is a really vague word, jsyk). In RogueLibs hook types derive from ',(0,a.kt)("inlineCode",{parentName:"p"},"IHook")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"IHook<T>"),", and RogueLibs provides a mechanism to attach these hooks to vanilla types, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"InvItem"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayfieldObject"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Unlock"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Trait")," and etc. Most custom content classes are based on hooks in one way or another."),(0,a.kt)("h2",{id:"ihook"},(0,a.kt)("inlineCode",{parentName:"h2"},"IHook")," interface"),(0,a.kt)("p",null,"RogueLibsPatcher.dll creates fields called ",(0,a.kt)("inlineCode",{parentName:"p"},"__RogueLibsHooks")," in all hookable types. An instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"IHookController")," class is then assigned to the ",(0,a.kt)("inlineCode",{parentName:"p"},"__RogueLibsHooks")," field to manage the attached hooks. It provides methods to get, attach and detach hooks from the current instance. Think of it as a collection of hooks."),(0,a.kt)("p",null,"You can create your own hooks by deriving either from ",(0,a.kt)("inlineCode",{parentName:"p"},"IHook<T>")," or from ",(0,a.kt)("inlineCode",{parentName:"p"},"HookBase<T>"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomHook.cs"',title:'"MyCustomHook.cs"'},'public class MyCustomHook : HookBase<InvItem>\n{\n    protected override void Initialize() { }\n    \n    public void StoreInfo(string data)\n    {\n        Debug.Log($"Stored {data}.");\n        Data = data;\n    }\n    public string LoadInfo()\n    {\n        Debug.Log($"Loaded {Data}.");\n        return Data;\n    }\n    private string Data;\n}\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"You can use hooks to store various stuff:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'MyCustomHook hook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("some-information");\n')),(0,a.kt)("p",null,"Then you can use that stuff somewhere else:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"MyCustomHook hook = item.GetHook<MyCustomHook>();\nif (hook != null)\n{\n    string data = hook.LoadInfo();\n}\n")),(0,a.kt)("p",null,"You can attach more than one hook of a type too:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'MyCustomHook hook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("some-information");\nhook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("some-other-stuff");\nhook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("something-else");\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"foreach (MyCustomHook hook in item.GetHooks<MyCustomHook>())\n{\n    string data = hook.LoadInfo();\n}\n")),(0,a.kt)("admonition",{title:"Pro-tip: Hook Factories",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you want to attach hooks to instances right when they are initialized, use ",(0,a.kt)("a",{parentName:"p",href:"./hook-factories"},"Hook Factories"),".")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Custom content classes (",(0,a.kt)("inlineCode",{parentName:"p"},"CustomItem"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomTrait"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomEffect"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomAbility")," and others) are hooks, by the way. You can see the custom classes' implementation in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SugarBarrel/RogueLibs/tree/main/RogueLibsCore/Hooks"},"RogueLibs' source code"),".")),(0,a.kt)(r.Z,{defaultValue:"spicerack",values:[{label:"Spice Rack",value:"spicerack"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"spicerack",mdxType:"TabItem"},(0,a.kt)("p",null,"A great example with custom hooks keeping track of seasoned items."),(0,a.kt)("p",null,"See the combinable item example ",(0,a.kt)("a",{parentName:"p",href:"../items/combinable-items#examples"},"here"),"."),(0,a.kt)(i.Z,{mdxType:"CodeSnippet"},l.Z))))}b.isMDXComponent=!0},5306:(e,t,o)=>{o.d(t,{Z:()=>n});const n='using UnityEngine;\n\nnamespace RogueLibsCore.Test\n{\n    [ItemCategories(RogueCategories.Food, RogueCategories.Health)]\n    public class SpiceRack : CustomItem, IItemCombinable\n    {\n        [RLSetup]\n        public static void Setup()\n        {\n            RogueLibs.CreateCustomItem<SpiceRack>()\n                .WithName(new CustomNameInfo("Spice Rack"))\n                .WithDescription(new CustomNameInfo("Combine with any food item to increase its healing properties."))\n                .WithSprite(Properties.Resources.SpiceRack)\n                .WithUnlock(new ItemUnlock\n                {\n                    UnlockCost = 10,\n                    LoadoutCost = 3,\n                    CharacterCreationCost = 2,\n                    Prerequisites = { VanillaItems.FoodProcessor },\n                });\n\n            SeasonCursorText = RogueLibs.CreateCustomName("SeasonItem", NameTypes.Interface, new CustomNameInfo("Season"));\n        }\n        private static CustomName SeasonCursorText = null!;\n\n        public override void SetupDetails()\n        {\n            Item.itemType = ItemTypes.Combine;\n            Item.itemValue = 4;\n            Item.initCount = 10;\n            Item.rewardCount = 15;\n            Item.stackable = true;\n            Item.hasCharges = true;\n        }\n        public bool CombineFilter(InvItem other)\n        {\n            if (other.itemType != ItemTypes.Food || other.healthChange is 0\n                || !other.Categories.Contains(RogueCategories.Food)) return false;\n\n            SpicedHook? hook = other.GetHook<SpicedHook>();\n            return hook is null || hook.Spiciness < 3;\n        }\n        public bool CombineItems(InvItem other)\n        {\n            if (!CombineFilter(other)) return false;\n\n            SpicedHook hook = other.GetHook<SpicedHook>() ?? other.AddHook<SpicedHook>();\n            hook.IncreaseSpiciness();\n\n            Count--;\n            gc.audioHandler.Play(Owner, VanillaAudio.CombineItem);\n            return true;\n        }\n        public CustomTooltip CombineCursorText(InvItem other) => SeasonCursorText;\n        public CustomTooltip CombineTooltip(InvItem other)\n        {\n            if (!CombineFilter(other)) return default;\n\n            SpicedHook? hook = other.GetHook<SpicedHook>();\n            int bonus = hook is null ? (int)Mathf.Ceil(other.healthChange / 4f) : hook.HealthBonus;\n            return new CustomTooltip($"+{bonus}", Color.green);\n        }\n\n        private class SpicedHook : HookBase<InvItem>\n        {\n            protected override void Initialize()\n                => HealthBonus = (int)Mathf.Ceil(Instance.healthChange / 4f);\n\n            public int HealthBonus { get; private set; }\n            public int Spiciness { get; private set; }\n\n            public void IncreaseSpiciness()\n            {\n                if (Spiciness is 3) return;\n\n                Spiciness++;\n                Instance.healthChange += HealthBonus;\n            }\n        }\n    }\n}\n'}}]);