"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9706],{4214:(e,t,a)=>{a.d(t,{Z:()=>r});var i=a(7294),n=a(814);function r(e){let{children:t,language:a}=e;return i.createElement(n.Z,{className:"language-"+(a||"csharp")},t.replace(/\t/g,"    "))}},1016:(e,t,a)=>{a.d(t,{Z:()=>r});var i=a(7462),n=a(7294);function r(e){let{children:t,...a}=e;return n.createElement("div",(0,i.Z)({role:"tabpanel"},a),t)}},5878:(e,t,a)=>{a.d(t,{Z:()=>p});var i=a(7294),n=a(6550),r=a(1980),l=a(7392),s=a(12);function o(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:i,default:n}}=e;return{value:t,label:a,attributes:i,default:n}}))}function u(e){const{values:t,children:a}=e;return(0,i.useMemo)((()=>{const e=t??o(a);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function c(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const l=(0,n.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,r._X)(s),(0,i.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(l.location.search);t.set(s,e),l.replace({...l.location,search:t.toString()})}),[s,l])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=u(e),[l,o]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=a.find((e=>e.default))??a[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:r}))),[b,m]=d({queryString:a,groupId:n}),[g,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,s.Nk)(a);return[n,(0,i.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),p=(()=>{const e=b??g;return c({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{p&&o(p)}),[p]);return{selectedValue:l,selectValue:(0,i.useCallback)((e=>{if(!c({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),h(e)}),[m,h,r]),tabValues:r}}var m=a(6010);const g={tabItem:"tabItem_V91s",tabItemActive:"tabItemActive_JsUu",blink:"blink_ZPVS",tab:"tab_ntnM"};const h={left:37,right:39};function p(e){const{lazy:t,defaultValue:a,values:n,groupId:r}=e,l=i.Children.toArray(e.children),{tabValues:s,selectedValue:o,selectValue:u}=b({children:l,defaultValue:a,values:n,groupId:r}),c=[],d=e=>{const t=e.currentTarget,a=n[c.indexOf(t)].value;u(a),null!=r&&setTimeout((()=>{(function(e){const{top:t,left:a,bottom:i,right:n}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:l}=window;return t>=0&&n<=l&&i<=r&&a>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(g.tabItemActive),setTimeout((()=>t.classList.remove(g.tabItemActive)),2e3))}),150)},p=e=>{let t;switch(e.keyCode){case h.right:{const a=c.indexOf(e.target)+1;t=c[a]||c[0];break}case h.left:{const a=c.indexOf(e.target)-1;t=c[a]||c[c.length-1];break}default:return}t.focus()},f=(e,t)=>t.value===e||t.values&&-1!=t.values.indexOf(e);return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},n.map((e=>{let{value:t,label:a}=e;return i.createElement("li",{role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,className:(0,m.Z)("tabs__item",g.tabItem,{"tabs__item--active":o===t}),key:t,ref:e=>e&&c.push(e),onKeyDown:p,onFocus:d,onClick:d},a)}))),t?i.cloneElement(l.find((e=>f(o,e.props))),{className:g.tab}):i.createElement("div",null,l.map(((e,t)=>i.cloneElement(e,{key:t,hidden:!f(o,e.props),className:g.tab})))),i.createElement("br",null))}},5081:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>c,default:()=>p,frontMatter:()=>u,metadata:()=>d,toc:()=>m});var i=a(7462),n=(a(7294),a(3905)),r=a(5878),l=a(1016),s=(a(4996),a(4214));const o='using UnityEngine;\n\nnamespace RogueLibsCore.Test\n{\n    public class Kamikaze : CustomAbility, IAbilityChargeable, IDoUpdate\n    {\n        [RLSetup]\n        public static void Setup()\n        {\n            RogueLibs.CreateCustomAbility<Kamikaze>()\n                .WithName(new CustomNameInfo("Kamikaze"))\n                .WithDescription(new CustomNameInfo("Charge up and explode everything around you."))\n                .WithSprite(Properties.Resources.Kamikaze)\n                .WithUnlock(new AbilityUnlock { UnlockCost = 20, CharacterCreationCost = 20 });\n        }\n\n        public float Charge { get; private set; }\n        public bool IsCharging { get; private set; }\n\n        public override void OnAdded() { }\n        public override void OnPressed()\n        {\n            IsCharging = true;\n            gc.audioHandler.Play(Owner, VanillaAudio.GeneratorHiss);\n            Owner!.objectMult.chargingSpecialLunge = true;\n        }\n        public override CustomTooltip GetCountString()\n        {\n            if (Charge is 0) return default;\n            string text = $"{Charge:#.#}s";\n            Color color = Color.Lerp(Color.white, Color.red, Charge / 10f);\n            if (Charge > 10f)\n            {\n                text = "BOOM!";\n                color = Color.Lerp(Color.white, Color.red, Mathf.PingPong(Time.time * 5, 1f));\n            }\n            return new CustomTooltip(text, color);\n        }\n        public void OnHeld(AbilityHeldArgs e)\n        {\n            Charge += Time.deltaTime;\n            e.HeldTime = Charge;\n            if (Charge > 10f)\n            {\n                Owner!.objectMult.chargingSpecialLunge = true;\n            }\n        }\n        public void OnReleased(AbilityReleasedArgs e)\n        {\n            IsCharging = false;\n            Owner!.objectMult.chargingSpecialLunge = false;\n            if (e.HeldTime > 10f)\n            {\n                Owner.AddEffect(VanillaEffects.Resurrection, new CreateEffectInfo(1) { DontShowText = true, IgnoreElectronic = true });\n                gc.spawnerMain.SpawnExplosion(Owner, Owner.tr.position, "Huge", false, -1, false, true).noOwnCheck = true;\n                Charge = 0f;\n            }\n            gc.audioHandler.Stop(Owner, VanillaAudio.GeneratorHiss);\n        }\n        public void Update()\n        {\n            if (!IsCharging) Charge = Mathf.Max(Charge - Time.deltaTime * 5f, 0f);\n        }\n    }\n}\n',u={},c="Chargeable Abilities",d={unversionedId:"dev/items/abilities/chargeable-abilities",id:"dev/items/abilities/chargeable-abilities",title:"Chargeable Abilities",description:"Custom abilities can be made chargeable by implementing the IAbilityChargeable interface. Ability's Count here works as the amount of stored up energy/charges. This interface makes use of some of the game's charging mechanics, but it doesn't completely rely on it. I'd recommend taking a look at Recharging Items, if you need finer control.",source:"@site/docs/dev/items/abilities/chargeable-abilities.mdx",sourceDirName:"dev/items/abilities",slug:"/dev/items/abilities/chargeable-abilities",permalink:"/RogueLibs/docs/dev/items/abilities/chargeable-abilities",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/items/abilities/chargeable-abilities.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Rechargeable Abilities",permalink:"/RogueLibs/docs/dev/items/abilities/rechargeable-abilities"},next:{title:"Targetable Abilities",permalink:"/RogueLibs/docs/dev/items/abilities/targetable-abilities"}},b={},m=[{value:"Making abilities chargeable",id:"making-chargeable",level:2},{value:"Examples",id:"examples",level:2}],g={toc:m},h="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(h,(0,i.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"chargeable-abilities"},"Chargeable Abilities"),(0,n.kt)("p",null,"Custom abilities can be made chargeable by implementing the ",(0,n.kt)("inlineCode",{parentName:"p"},"IAbilityChargeable")," interface. Ability's ",(0,n.kt)("inlineCode",{parentName:"p"},"Count")," here works as the amount of stored up energy/charges. This interface makes use of some of the game's charging mechanics, but it doesn't completely rely on it. I'd recommend taking a look at ",(0,n.kt)("a",{parentName:"p",href:"/RogueLibs/docs/dev/items/recharging-items"},"Recharging Items"),", if you need finer control."),(0,n.kt)("h2",{id:"making-chargeable"},"Making abilities chargeable"),(0,n.kt)("p",null,"Just implement the ",(0,n.kt)("inlineCode",{parentName:"p"},"IAbilityChargeable")," interface in your ability's class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyChargeableAbility.cs"',title:'"MyChargeableAbility.cs"'},"// highlight-next-line\npublic class MyChargeableAbility : CustomAbility, IAbilityChargeable\n{\n    // highlight-start\n    public void OnHeld(AbilityHeldArgs e) { /* ... */ }\n    public void OnReleased(AbilityReleasedArgs e) { /* ... */ }\n    // highlight-end\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"OnHeld")," is called every frame ",(0,n.kt)("em",{parentName:"p"},"(I think?)")," that the special ability button is held. ",(0,n.kt)("inlineCode",{parentName:"p"},"OnReleased")," is called on the frame that the special ability button is released. Use these in tandem with ",(0,n.kt)("inlineCode",{parentName:"p"},"OnPressed")," to charge your ability and stuff."),(0,n.kt)("admonition",{type:"caution"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"AbilityHeldArgs.Interrupt()")," method is still work-in-progress.")),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)(r.Z,{defaultValue:"kamikaze",values:[{label:"Kamikaze",value:"kamikaze"}],mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"kamikaze",mdxType:"TabItem"},(0,n.kt)(s.Z,{mdxType:"CodeSnippet"},o))))}p.isMDXComponent=!0}}]);