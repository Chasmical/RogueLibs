(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8320],{3449:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return m},metadata:function(){return d},toc:function(){return l},default:function(){return p}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),s=(n(1429),n(1016),n(4996),["components"]),o={},m="Custom Name Providers",d={unversionedId:"dev/names/name-providers",id:"dev/names/name-providers",isDocsHomePage:!1,title:"Custom Name Providers",description:"If you have some kind of complicated naming strategy, then you might want to use INameProvider. This way you can control what strings are returned by NameDB.GetName in a more generic way. Just create a class implementing INameProvider and add it to RogueFramework.",source:"@site/docs/dev/names/name-providers.mdx",sourceDirName:"dev/names",slug:"/dev/names/name-providers",permalink:"/RogueLibs/docs/dev/names/name-providers",editUrl:"https://github.com/Abbysssal/RogueLibs/edit/main/website/docs/dev/names/name-providers.mdx",version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Custom Languages*",permalink:"/RogueLibs/docs/dev/names/custom-languages"},next:{title:"Custom Sprites",permalink:"/RogueLibs/docs/dev/custom-sprites"}},l=[],u={toc:l};function p(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-name-providers"},"Custom Name Providers"),(0,r.kt)("p",null,"If you have some kind of complicated naming strategy, then you might want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"INameProvider"),". This way you can control what strings are returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"NameDB.GetName")," in a more generic way. Just create a class implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"INameProvider")," and add it to ",(0,r.kt)("inlineCode",{parentName:"p"},"RogueFramework"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyNameProvider.cs"',title:'"MyNameProvider.cs"'},'public class MyNameProvider : INameProvider\n{\n    public void GetName(string name, string type, ref string result)\n    {\n        if (name.StartsWith("fake_"))\n        {\n            string sub = name.Substring("fake_".Length);\n            result = LanguageService.NameDB.GetName(sub, type);\n        }\n    }\n}\n')),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If the original ",(0,r.kt)("inlineCode",{parentName:"p"},"NameDB.GetName")," returned an error string (with ",(0,r.kt)("inlineCode",{parentName:"p"},"E_")," prefix), ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"RogueFramework.NameProviders.Add(new MyNameProvider());\n")),(0,r.kt)("p",null,"Here's a more practical and useful example, that is already implemented in RogueLibs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class DialogueNameProvider : INameProvider\n{\n    public void GetName(string name, string type, ref string result)\n    {\n        if (result is null && type == "Dialogue" && name.StartsWith("NA_"))\n        {\n            string sub = name.Substring("NA_".Length);\n            string newResult = LanguageService.NameDB.GetName(sub, type);\n            if (!newResult.StartsWith("E_")) result = newResult;\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Normally, the game looks for dialogue names of the following format: ",(0,r.kt)("inlineCode",{parentName:"p"},"<AgentName>_<DialogueName>"),". If such a name doesn't exist, then ",(0,r.kt)("inlineCode",{parentName:"p"},"NA_<DialogueName>")," (NA - No Agent) is used instead. This name provider will also look for a name with just the dialogue name. This allows the developers to write dialogue names without that annoying ",(0,r.kt)("inlineCode",{parentName:"p"},"NA_")," prefix."))}p.isMDXComponent=!0}}]);