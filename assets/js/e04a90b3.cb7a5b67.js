"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6634],{4214:(e,o,t)=>{t.d(o,{Z:()=>s});var n=t(7294),a=t(814);function s(e){let{children:o,language:t}=e;return n.createElement(a.Z,{className:"language-"+(t||"csharp")},o.replace(/\t/g,"    "))}},1016:(e,o,t)=>{t.d(o,{Z:()=>s});var n=t(7462),a=t(7294);function s(e){let{children:o,...t}=e;return a.createElement("div",(0,n.Z)({role:"tabpanel"},t),o)}},250:(e,o,t)=>{t.d(o,{Z:()=>m});var n=t(7294),a=t(7094),s=t(6010);const i="tabItem_V91s",r="tabItemActive_JsUu",l="tab_ntnM";const c=37,u=39;function m(e){const{lazy:o,defaultValue:t,values:m,groupId:k}=e,{tabGroupChoices:p,setTabGroupChoices:h}=(0,a.U)(),[d,b]=(0,n.useState)(t),C=n.Children.toArray(e.children),g=[];if(null!=k){const e=p[k];null!=e&&e!==d&&m.some((o=>o.value===e))&&b(e)}const f=e=>{const o=e.currentTarget,t=g.indexOf(o),n=m[t].value;b(n),null!=k&&(h(k,n),setTimeout((()=>{(function(e){const{top:o,left:t,bottom:n,right:a}=e.getBoundingClientRect(),{innerHeight:s,innerWidth:i}=window;return o>=0&&a<=i&&n<=s&&t>=0})(o)||(o.scrollIntoView({block:"center",behavior:"smooth"}),o.classList.add(r),setTimeout((()=>o.classList.remove(r)),2e3))}),150))},v=e=>{let o;switch(e.keyCode){case u:{const t=g.indexOf(e.target)+1;o=g[t]||g[0];break}case c:{const t=g.indexOf(e.target)-1;o=g[t]||g[g.length-1];break}default:return}o.focus()},I=(e,o)=>o.value===e||o.values&&-1!=o.values.indexOf(e);return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:"tabs"},m.map((e=>{let{value:o,label:t}=e;return n.createElement("li",{role:"tab",tabIndex:d===o?0:-1,"aria-selected":d===o,className:(0,s.Z)("tabs__item",i,{"tabs__item--active":d===o}),key:o,ref:e=>e&&g.push(e),onKeyDown:v,onFocus:f,onClick:f},t)}))),o?n.cloneElement(C.find((e=>I(d,e.props))),{className:l}):n.createElement("div",null,C.map(((e,o)=>n.cloneElement(e,{key:o,hidden:!I(d,e.props),className:l})))),n.createElement("br",null))}},3528:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>k,contentTitle:()=>u,default:()=>d,frontMatter:()=>c,metadata:()=>m,toc:()=>p});var n=t(7462),a=(t(7294),t(3905)),s=t(250),i=t(1016),r=(t(4996),t(4214)),l=t(5306);const c={},u="Hooks",m={unversionedId:"dev/hooks/hooks",id:"dev/hooks/hooks",title:"Hooks",description:'A hook is an object that is attached to another object ("hook" is a really vague word, jsyk). In RogueLibs hook types derive from IHook and IHook, and RogueLibs provides a mechanism to attach these hooks to vanilla types, such as InvItem, PlayfieldObject, Unlock, Trait and etc. Most custom content classes are based on hooks in one way or another.',source:"@site/docs/dev/hooks/hooks.mdx",sourceDirName:"dev/hooks",slug:"/dev/hooks/",permalink:"/RogueLibs/docs/dev/hooks/",draft:!1,editUrl:"https://github.com/SugarBarrel/RogueLibs/edit/main/website/docs/dev/hooks/hooks.mdx",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Patching Utilities",permalink:"/RogueLibs/docs/dev/patching-utilities"},next:{title:"Hook Factories",permalink:"/RogueLibs/docs/dev/hooks/hook-factories"}},k={},p=[{value:"<code>IHook</code> interface",id:"ihook",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}],h={toc:p};function d(e){let{components:o,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},h,t,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hooks"},"Hooks"),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"hook"),' is an object that is attached to another object ("hook" is a really vague word, jsyk). In RogueLibs hook types derive from ',(0,a.kt)("inlineCode",{parentName:"p"},"IHook")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"IHook<T>"),", and RogueLibs provides a mechanism to attach these hooks to vanilla types, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"InvItem"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PlayfieldObject"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Unlock"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Trait")," and etc. Most custom content classes are based on hooks in one way or another."),(0,a.kt)("h2",{id:"ihook"},(0,a.kt)("inlineCode",{parentName:"h2"},"IHook")," interface"),(0,a.kt)("p",null,"RogueLibsPatcher.dll creates fields called ",(0,a.kt)("inlineCode",{parentName:"p"},"__RogueLibsHooks")," in all hookable types. An instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"IHookController")," class is then assigned to the ",(0,a.kt)("inlineCode",{parentName:"p"},"__RogueLibsHooks")," field to manage the attached hooks. It provides methods to get, attach and detach hooks from the current instance. Think of it as a collection of hooks."),(0,a.kt)("p",null,"You can create your own hooks by deriving either from ",(0,a.kt)("inlineCode",{parentName:"p"},"IHook<T>")," or from ",(0,a.kt)("inlineCode",{parentName:"p"},"HookBase<T>"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyCustomHook.cs"',title:'"MyCustomHook.cs"'},'public class MyCustomHook : HookBase<InvItem>\n{\n    protected override void Initialize() { }\n    \n    public void StoreInfo(string data)\n    {\n        Debug.Log($"Stored {data}.");\n        Data = data;\n    }\n    public string LoadInfo()\n    {\n        Debug.Log($"Loaded {Data}.");\n        return Data;\n    }\n    private string Data;\n}\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"You can use hooks to store various stuff:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'MyCustomHook hook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("some-information");\n')),(0,a.kt)("p",null,"Then you can use that stuff somewhere else:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"MyCustomHook hook = item.GetHook<MyCustomHook>();\nif (hook != null)\n{\n    string data = hook.LoadInfo();\n}\n")),(0,a.kt)("p",null,"You can attach more than one hook of a type too:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'MyCustomHook hook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("some-information");\nhook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("some-other-stuff");\nhook = item.AddHook<MyCustomHook>();\nhook.StoreInfo("something-else");\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"foreach (MyCustomHook hook in item.GetHooks<MyCustomHook>())\n{\n    string data = hook.LoadInfo();\n}\n")),(0,a.kt)("admonition",{title:"Pro-tip: Hook Factories",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you want to attach hooks to instances right when they are initialized, use ",(0,a.kt)("a",{parentName:"p",href:"./hook-factories"},"Hook Factories"),".")),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Custom content classes (",(0,a.kt)("inlineCode",{parentName:"p"},"CustomItem"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomTrait"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomEffect"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CustomAbility")," and others) are hooks, by the way. You can see the custom classes' implementation in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SugarBarrel/RogueLibs/tree/main/RogueLibsCore/Hooks"},"RogueLibs' source code"),".")),(0,a.kt)(s.Z,{defaultValue:"spicerack",values:[{label:"Spice Rack",value:"spicerack"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"spicerack",mdxType:"TabItem"},(0,a.kt)("p",null,"A great example with custom hooks keeping track of seasoned items."),(0,a.kt)("p",null,"See the combinable item example ",(0,a.kt)("a",{parentName:"p",href:"../items/combinable-items#examples"},"here"),"."),(0,a.kt)(r.Z,{mdxType:"CodeSnippet"},l.Z))))}d.isMDXComponent=!0},5306:(e,o,t)=>{t.d(o,{Z:()=>n});const n='using UnityEngine;\n\nnamespace RogueLibsCore.Test\n{\n    [ItemCategories(RogueCategories.Food, RogueCategories.Health)]\n    public class SpiceRack : CustomItem, IItemCombinable\n    {\n        [RLSetup]\n        public static void Setup()\n        {\n            RogueLibs.CreateCustomItem<SpiceRack>()\n                .WithName(new CustomNameInfo("Spice Rack"))\n                .WithDescription(new CustomNameInfo("Combine with any food item to increase its healing properties."))\n                .WithSprite(Properties.Resources.SpiceRack)\n                .WithUnlock(new ItemUnlock\n                {\n                    UnlockCost = 10,\n                    LoadoutCost = 3,\n                    CharacterCreationCost = 2,\n                    Prerequisites = { VanillaItems.FoodProcessor },\n                });\n\n            SeasonCursorText = RogueLibs.CreateCustomName("SeasonItem", NameTypes.Interface, new CustomNameInfo("Season"));\n        }\n        private static CustomName SeasonCursorText = null!;\n\n        public override void SetupDetails()\n        {\n            Item.itemType = ItemTypes.Combine;\n            Item.itemValue = 4;\n            Item.initCount = 10;\n            Item.rewardCount = 15;\n            Item.stackable = true;\n            Item.hasCharges = true;\n        }\n        public bool CombineFilter(InvItem other)\n        {\n            if (other.itemType != ItemTypes.Food || other.healthChange is 0\n                || !other.Categories.Contains(RogueCategories.Food)) return false;\n\n            SpicedHook? hook = other.GetHook<SpicedHook>();\n            return hook is null || hook.Spiciness < 3;\n        }\n        public bool CombineItems(InvItem other)\n        {\n            if (!CombineFilter(other)) return false;\n\n            SpicedHook hook = other.GetHook<SpicedHook>() ?? other.AddHook<SpicedHook>();\n            hook.IncreaseSpiciness();\n\n            Count--;\n            gc.audioHandler.Play(Owner, VanillaAudio.CombineItem);\n            return true;\n        }\n        public CustomTooltip CombineCursorText(InvItem other) => SeasonCursorText;\n        public CustomTooltip CombineTooltip(InvItem other)\n        {\n            if (!CombineFilter(other)) return default;\n\n            SpicedHook? hook = other.GetHook<SpicedHook>();\n            int bonus = hook is null ? (int)Mathf.Ceil(other.healthChange / 4f) : hook.HealthBonus;\n            return new CustomTooltip($"+{bonus}", Color.green);\n        }\n\n        private class SpicedHook : HookBase<InvItem>\n        {\n            protected override void Initialize()\n                => HealthBonus = (int)Mathf.Ceil(Instance.healthChange / 4f);\n\n            public int HealthBonus { get; private set; }\n            public int Spiciness { get; private set; }\n\n            public void IncreaseSpiciness()\n            {\n                if (Spiciness is 3) return;\n\n                Spiciness++;\n                Instance.healthChange += HealthBonus;\n            }\n        }\n    }\n}\n'}}]);