(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8279],{4214:function(t,e,n){"use strict";n.d(e,{Z:function(){return r}});var a=n(7294),i=n(1756);function r(t){var e=t.children,n=t.language;return a.createElement(i.Z,{className:"language-"+(n||"csharp")},e.replace(/\t/g,"    "))}},2725:function(t,e,n){"use strict";n.d(e,{Z:function(){return i}});var a=n(7294);function i(t){var e=t.color,n=(t.size||14)+"px";return a.createElement("div",{style:{display:"inline"}},a.createElement("div",{style:{display:"inline-block",width:n,height:n,background:e,marginRight:"2px"}}),a.createElement("div",{style:{display:"inline"}},e))}},9604:function(t,e,n){"use strict";n.r(e),n.d(e,{contentTitle:function(){return g},default:function(){return b},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return d}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),l=n(8952),s=n(9309),o=(n(4996),n(2725)),u=n(4214),m=["components"],p={},g="Targetable Items",c={unversionedId:"dev/items/targetable-items",id:"dev/items/targetable-items",isDocsHomePage:!1,title:"Targetable Items",description:"Making items targetable",source:"@site/docs/dev/items/targetable-items.mdx",sourceDirName:"dev/items",slug:"/dev/items/targetable-items",permalink:"/RogueLibs/docs/dev/items/targetable-items",editUrl:"https://github.com/Abbysssal/RogueLibs/edit/main/website/docs/dev/items/targetable-items.mdx",version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Combinable Items",permalink:"/RogueLibs/docs/dev/items/combinable-items"},next:{title:"Targetable Items +",permalink:"/RogueLibs/docs/dev/items/targetable-items-plus"}},d=[{value:"Making items targetable",id:"making-targetable",children:[]},{value:"Examples",id:"examples",children:[]}],h={toc:d};function b(t){var e=t.components,n=(0,i.Z)(t,m);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"targetable-items"},"Targetable Items"),(0,r.kt)("h2",{id:"making-targetable"},"Making items targetable"),(0,r.kt)("p",null,"Just implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"IItemTargetable")," interface in your item's class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="MyTargetableItem.cs"',title:'"MyTargetableItem.cs"'},"// highlight-next-line\npublic class MyTargetableItem : CustomItem, IItemTargetable\n{\n    // highlight-start\n    public bool TargetFilter(PlayfieldObject target) { /* ... */ }\n    public bool TargetObject(PlayfieldObject target) { /* ... */ }\n    public CustomTooltip TargetCursorText(PlayfieldObject target) { /* ... */ }\n    // highlight-end\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TargetFilter")," determines what objects will be highlighted, when using the current item."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TargetObject")," uses the current item on the target. The return value indicates whether it was a success or not. You can play a ",(0,r.kt)("inlineCode",{parentName:"p"},'"CantDo"')," sound and make the player say something, if the item cannot be used. Returning ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," will also play an animation."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TargetCursorText")," determines the text under the cursor when hovering over the specified object. ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),' will default to "Use", and ',(0,r.kt)("inlineCode",{parentName:"p"},"Color")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," will default to ",(0,r.kt)(o.Z,{color:"#FFFFFF",mdxType:"ColorSquare"}),"."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)(l.Z,{defaultValue:"spytron3000",values:[{label:"SPYTRON 3000",value:"spytron3000"}],mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"spytron3000",mdxType:"TabItem"},(0,r.kt)("p",null,"SPYTRON 3000 from Team Fortress 2. Makes you look like the selected person and copies their relationships."),(0,r.kt)(u.Z,{mdxType:"CodeSnippet"},'namespace RogueLibsCore.Test\n{\n\t[ItemCategories(RogueCategories.Social, RogueCategories.Stealth,\n\t\tRogueCategories.Technology, RogueCategories.Usable)]\n\tpublic class SPYTRON3000 : CustomItem, IItemTargetable\n\t{\n\t\t[RLSetup]\n\t\tpublic static void Setup()\n\t\t{\n\t\t\tRogueLibs.CreateCustomItem<SPYTRON3000>()\n\t\t\t\t.WithName(new CustomNameInfo("SPYTRON 3000"))\n\t\t\t\t.WithDescription(new CustomNameInfo("Always wanted to be someone else? Now you can!"))\n\t\t\t\t.WithSprite(Properties.Resources.SPYTRON3000)\n\t\t\t\t.WithUnlock(new ItemUnlock\n\t\t\t\t{\n\t\t\t\t\tUnlockCost = 10,\n\t\t\t\t\tLoadoutCost = 2,\n\t\t\t\t\tCharacterCreationCost = 3,\n\t\t\t\t\tPrerequisites = { VanillaItems.BodySwapper },\n\t\t\t\t});\n\n\t\t\tDisguiseCursorText = RogueLibs.CreateCustomName("Disguise", NameTypes.Interface, new CustomNameInfo("Disguise as"));\n\t\t}\n\t\tprivate static CustomName DisguiseCursorText;\n\n\t\tpublic override void SetupDetails()\n\t\t{\n\t\t\tItem.itemType = ItemTypes.Tool;\n\t\t\tItem.itemValue = 40;\n\t\t\tItem.initCount = 2;\n\t\t\tItem.rewardCount = 3;\n\t\t\tItem.stackable = true;\n\t\t\tItem.goesInToolbar = true;\n\t\t}\n\t\tpublic bool TargetFilter(PlayfieldObject target) => target is Agent a && a != Owner;\n\t\tpublic bool TargetObject(PlayfieldObject targetObj)\n\t\t{\n\t\t\tif (!TargetFilter(targetObj)) return false;\n\t\t\tAgent target = (Agent)targetObj;\n\n\t\t\tstring prev = Owner.agentName;\n\t\t\tOwner.agentName = target.agentName;\n\n\t\t\tOwner.relationships.CopyLooks(target);\n\t\t\tforeach (Relationship rel in target.relationships.RelList)\n\t\t\t{\n\t\t\t\tRelationship otherRel = rel.agent.relationships.GetRelationship(target);\n\n\t\t\t\tOwner.relationships.SetRel(rel.agent, rel.relType);\n\t\t\t\tOwner.relationships.SetRelHate(rel.agent, 0);\n\t\t\t\tOwner.relationships.GetRelationship(rel.agent).secretHate = rel.secretHate;\n\t\t\t\tOwner.relationships.GetRelationship(rel.agent).mechHate = rel.mechHate;\n\n\t\t\t\trel.agent.relationships.SetRel(Owner, otherRel.relType);\n\t\t\t\trel.agent.relationships.SetRelHate(Owner, 0);\n\t\t\t\trel.agent.relationships.GetRelationship(Owner).secretHate = otherRel.secretHate;\n\t\t\t\trel.agent.relationships.GetRelationship(Owner).mechHate = otherRel.mechHate;\n\t\t\t}\n\t\t\ttarget.relationships.SetRel(Owner, "Hateful");\n\t\t\ttarget.relationships.SetRelHate(Owner, 25);\n\n\t\t\tOwner.agentName = prev;\n\n\t\t\tOwner.gc.audioHandler.Play(Owner, VanillaAudio.Spawn);\n\t\t\tOwner.gc.spawnerMain.SpawnParticleEffect("Spawn", Owner.tr.position, 0f);\n\n\t\t\tCount--;\n\t\t\tItem.invInterface.HideTarget();\n\t\t\treturn true;\n\t\t}\n\t\tpublic CustomTooltip TargetCursorText(PlayfieldObject _) => DisguiseCursorText;\n\t}\n}\n'))))}b.isMDXComponent=!0}}]);