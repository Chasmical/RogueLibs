<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>RogueLibs Documentation Blog</title>
        <link>https://abbysssal.github.io/RogueLibs/ru/blog</link>
        <description>RogueLibs Documentation Blog</description>
        <lastBuildDate>Sun, 30 Jan 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[RogueLibs v3.5.0 enters beta]]></title>
            <link>https://abbysssal.github.io/RogueLibs/ru/blog/2022/01/30/roguelibs-v3.5.0-beta</link>
            <guid>/2022/01/30/roguelibs-v3.5.0-beta</guid>
            <pubDate>Sun, 30 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Information about the v3.5.0-beta]]></description>
            <content:encoded><![CDATA[<p>Today RogueLibs v3.5.0 enters a long beta, because there&#x27;s a huge list of stuff that needs to be done before the release, mainly adding new custom interactions without adding more patches. You&#x27;ll be able to download the beta version on <a href="https://github.com/Abbysssal/RogueLibs/releases">RogueLibs&#x27; releases page</a>.</p><p>Just like the localization system in v3.1.0, v3.5.0 will completely replace the vanilla interactions system. The original code in these places is absolutely awful and inconsistent. So, we&#x27;ll have to rewrite every single vanilla interaction to be moddable.</p><p><img src="./screenshot.png"/></p><p>:::note
In RogueLibs v3.5.0-beta.X all of the objects will have this button. And by &quot;that button&quot; I mean the &quot;I am patched!&quot; one, not &quot;Make Offering of Human Body&quot; one. It will be removed from the v3.5.0 full release, of course.
:::</p><p>Click &quot;Read More&quot; to see the entire to-do list.</p><p>❌<code>Agent</code>, ✅<code>AirConditioner</code>, ✅<code>AlarmButton</code>, ✅<code>Altar</code>, ✅<code>AmmoDispenser</code>, ❌<code>ArcadeGame</code>, ❌<code>ATMMachine</code>, ❌<code>AugmentationBooth</code>, ✅<code>Barbecue</code>, ❌<code>BarbedWire</code>, ❌<code>Bars</code>, ❌(?)<code>BarStool</code>, ❌(?)<code>Bathtub</code>, ❌<code>Bed</code>, ❌(?)<code>Boulder</code>, ❌(?)<code>BoulderSmall</code>, ❌(?)<code>Bush</code>, ❌<code>CapsuleMachine</code>, ❌(?)<code>Chair</code>, ❌(?)<code>ChestBasic</code>, ❌<code>CloneMachine</code>, ❌<code>Computer</code>, ❌(?)<code>Counter</code>, ❌<code>Crate</code>, ❌(?)<code>Desk</code>, ❌<code>Door</code>, ❌<code>Elevator</code>, ❌(?)<code>ExplodingBarrel</code>, ❌<code>FireHydrant</code>, ❌(?)<code>FirePlace</code>, ❌(?)<code>FireSpewer</code>, ❌(?)<code>FlameGrate</code>, ❌(?)<code>FlamingBarrel</code>, ❌(?)<code>GasVent</code>, ❌<code>Generator</code>, ❌<code>Generator2</code>, ❌(?)<code>Gravestone</code>, ❌(?)<code>Item</code>, ❌<code>Jukebox</code>, ❌(?)<code>KillerPlant</code>, ❌(?)<code>Lamp</code>, ❌<code>LaserEmitter</code>, ❌<code>LoadoutMachine</code>, ❌(?)<code>LockdownWall</code>, ❌(?)<code>Manhole</code>, ❌(?)<code>MineCart</code>, ❌(?)<code>MovieScreen</code>, ❌<code>PawnShopMachine</code>, ❌(?)<code>Plant</code>, ❌<code>Podium</code>, ❌<code>PoliceBox</code>, ❌(?)<code>PoolTable</code>, ❌<code>PowerBox</code>, ❌<code>Refrigerator</code>, ❌<code>Safe</code>, ❌<code>SatelliteDish</code>, ❌(?)<code>SawBlade</code>, ❌<code>SecurityCam</code>, ❌(?)<code>Shelf</code>, ❌(?)<code>Sign</code>, ❌(?)<code>SlimeBarrel</code>, ❌(?)<code>SlimePuddle</code>, ❌<code>SlotMachine</code>, ❌(?)<code>Speaker</code>, ❌(?)<code>StartingPoint</code>, ❌(?)<code>Stove</code>, ❌(?)<code>SwitchBasic</code>, ❌(?)<code>Table</code>, ❌(?)<code>TableBig</code>, ❌(?)<code>Television</code>, ❌<code>Toilet</code>, ❌(?)<code>Train</code>, ❌<code>TrapDoor</code>, ❌(?)<code>TrashCan</code>, ❌(?)<code>Tree</code>, ❌(?)<code>Tube</code>, ❌<code>Turntables</code>, ❌<code>Turret</code>, ❌(?)<code>VendorCart</code>, ❌(?)<code>WasteBasket</code>, ❌<code>WaterPump</code>, ❌<code>Well</code>, ❌<code>Window</code>.</p><p>:::note Legend
❌ - not implemented, 🔹 - not tested, ✅ - implemented, (?) - may be tricky to implement.
:::
See the <a href="https://discord.gg/m3zuHSwQw2">#modding channel</a> on the <a href="https://discord.com/invite/streetsofrogue">official SoR&#x27;s Discord server</a> for an up-to-date information. The list in this article will not be updated.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What I hate about SoR]]></title>
            <link>https://abbysssal.github.io/RogueLibs/ru/blog/2021/08/31/what-i-hate-about-sor</link>
            <guid>/2021/08/31/what-i-hate-about-sor</guid>
            <pubDate>Tue, 31 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[The code is really hard and wet.]]></description>
            <content:encoded><![CDATA[<h2>The code is really hard and wet</h2><p>.. Wait- No! I mean that the game is really <strong>hard</strong>coded! And the code is very <strong>WET</strong> - it&#x27;s the opposite of the DRY (Don&#x27;t Repeat Yourself) principle... It&#x27;s pretty funny to say that though.</p><p>So, anyways, I decided to make a list of things that I hate about modding Streets of Rogue:</p><h3>Global namespace</h3><p>The first annoying thing that you notice, when you take a brief look into SoR modding, is that all of the game&#x27;s types are in the global namespace. There&#x27;s a couple of exceptions, though that&#x27;s probably from the copy-pasted code.</p><p><img src="https://imgur.com/HYDcvxx.png" alt="Global namespace (dnSpy)"/></p><p>I mean, come on, just organize stuff in namespaces! Like <code>StreetsOfRogue</code> for main stuff, <code>StreetsOfRogue.LevelGeneration</code> for stuff related to level generation, <code>StreetsOfRogue.Objects</code> for all classes derived from <code>ObjectReal</code> and etc.</p><h3>A lot of unused types and members</h3><p>There&#x27;s a lot of stuff, that&#x27;s not used in the game at all. Some part of it is just some test code. The other part - is not related to Streets of Rogue at all, and probably was copy-pasted from somewhere else.</p><p><img src="https://imgur.com/XNeeF8Q.png" alt="A lot of unused types"/>
<img src="https://imgur.com/REhaTil.png" alt="3 unused fields in Agent class"/></p><h3>Bad names</h3><p><del>Type and member names should be descriptive. I do understand that Matt was the only one developing the game and didn&#x27;t expect anyone to mess with the game&#x27;s code. I also understand that you would know your own code better that anyone else, but still...</del> Although, nevermind, there&#x27;s probably a ton of comments in the source code, that we can&#x27;t see in the compiled assembly.</p><h3>Too many string comparisons</h3><p>After a couple of minutes of browsing through the code, you&#x27;ll notice that there&#x27;s way too many string comparisons. You know they&#x27;re heavy on the performance. Sometimes they&#x27;re in places where you don&#x27;t even need strings, for example, in <code>Relationships</code> where you could have just used enumerations (actually, Matt used <strong>both</strong> enumerations and strings, for some weird reason).</p><h3>Empty strings</h3><p>For some reason, <code>&quot;&quot;</code> is used instead of <code>string.Empty</code>. And for some reason <code>&quot;&quot;</code> in a lot of the code is equivalent to <code>null</code>. You know exactly what&#x27;s wrong with that. In one case there <strong>is</strong> a string, that simply has zero length, in the other case - <strong>nothing</strong>, not even a string, just nothing. It&#x27;s just plain wrong.</p><p><img src="https://imgur.com/9rDQAe7.png" alt="&quot;&quot; used instead of string.Empty or null"/></p><h3>Non-flexible mechanics</h3><p>For example, <code>Unlock</code> has three fields: <code>unavailable</code>, <code>onlyInCharacterCreation</code>, <code>freeItem</code>. How do you make something available only in Item Teleporter and not available anywhere else? Not only the fields are not descriptive, but they also function significantly differently - <code>unavailable</code> makes items unavailable anywhere, while <code>onlyInCharacterCreation</code> <em>apparently</em> makes an item available <strong>only</strong> in CC, and <code>freeItem</code> makes it available in Item Teleporter. You could have just named them <code>availableInGame</code>, <code>availableInCharacterCreation</code>, <code>availableInItemTeleporter</code>. Then their function and purpose is obvious.</p><p><img src="https://imgur.com/gjnxvNM.png" alt="unavailable, onlyInCharacterCreation and freeItem fields"/></p><p>I spent <strong>dozens of hours</strong> converting that kind of system into something more maintainable: <code>Available</code>, <code>AvailableInCC</code> and <code>AvailableInItemTeleporter</code> - properties that you can find in RogueLibs. And even after that, <a href="https://github.com/Abbysssal/RogueLibs/issues/40">there still were issues</a>. <em>I&#x27;m bad at discrete mathematics, that&#x27;s why I had a hard time doing that.</em></p><h3>Hard code</h3><p>A lot of stuff in the game is so hardcoded, that it&#x27;s almost impossible to add something completely new and unique. You&#x27;d have to modify code in a ton of places, even in places that you wouldn&#x27;t even think to look in.<br/>
<!-- -->I mean, why would you hardcode the amount of players in the game? Each player has a different field (<code>playerAgent</code>, <code>playerAgent2</code>, and so on). That&#x27;s the only reason why creating a multiplayer game with more than 4 players is impossible.</p><h3>Toolkit 2D library</h3><p>I spent <strong>months</strong> trying to figure out how this fucking library works! There&#x27;s no documentation on it. I mean, there are a couple of guides on how to use it in Unity Editor, but there&#x27;s nothing on how it works internally. There are way too many unused classes, methods, properties and features, and for some reason the classes are in the global namespace. I&#x27;m surprised that Matt even figured out how to use it.</p><h3>Disregard of common programming principles</h3><p>A lot of methods have way too many instructions in them and sometimes they do stuff that you wouldn&#x27;t expect them to do. Just split these different features into different methods.<br/>
<strong>KISS principle (Keep It Simple, Stupid)</strong>.</p><p>A lot of methods have a lot of repeating code. You can put that repeating code in a separate method. That will save you a ton of time writing new methods, plus, the code will be easier to read.<br/>
<strong>DRY principle (Don&#x27;t Repeat Yourself)</strong>.</p><h3>Binary serialization</h3><p><img src="https://imgur.com/bl0tEOj.png" alt="Comparison of raw binary data and XML-formatted file"/></p><p>Why would you use binary serialization? It&#x27;s completely unreadable!<br/>
<!-- -->Just use XML, JSON or whatever markup language you want, anything but raw binary data!</p><h3>Classes are used like structs</h3><p>Matt clearly doesn&#x27;t understand the difference between reference and value types.</p><h3>Lack of properties</h3><p>Instead of constantly setting and updating fields&#x27; values in <code>Awake</code>, <code>Start</code> and other methods, you should just use properties. This way you won&#x27;t have to constantly update fields&#x27; values, once you change one other field&#x27;s value. The code will instantly become more maintainable.</p><p><img src="https://imgur.com/gI7WV4I.png" alt="MyStart method sets up fields and is called in every other method"/></p><h3>Virtual methods</h3><p>Instead of putting dozens of empty virtual methods in a base class and overriding them in a couple of derived types, you should use interfaces! That&#x27;s literally what they were created for.</p><p><img src="https://imgur.com/aKQA76v.png" alt="Empty virtual methods"/></p><h3>Lack of events</h3><p>Instead of checking for conditions of doing something on every frame update, you should use events. That&#x27;s literally what they were created for. As a bonus, there&#x27;s no 1-frame delay, that you get from checking conditions every frame. And also, you know, checking event conditions every frame is a little bit excessive and definitely uses way too much CPU.</p><h3>Giant <code>for</code> loops</h3><p><img src="https://imgur.com/kY8gtia.png" alt="A lot of really big and inefficient loops"/></p><p>Why would you try to repeat the operation, if you know that the results will be exactly the same?</p><p><img src="https://imgur.com/vjCshb5.png" alt="An unnecessary for loop"/></p><p>Why the hell would you write all of these giant <code>for</code> loops with a ton of conditions, <code>break</code>s and <code>continue</code>s and stuff like that, when there are already methods that do exactly that?<br/>
<strong>Just use System.Linq extensions and List&lt;T<!-- -->&gt;<!-- --> methods!</strong></p><h2>Conclusion</h2><p>Well, that&#x27;s it. For now, at least.</p><p>I wish Matt would fix all of that and make SoR 2 at least slightly more moddable and maintainable. If all of that stuff gets fixed in SoR 2, I&#x27;d be really happy, and I&#x27;d definitely make sure that SoR 2 has the best modding library possible. Otherwise, I might just refuse to make mods for the sequel, when it comes out.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RogueLibs v3.1.0 released!]]></title>
            <link>https://abbysssal.github.io/RogueLibs/ru/blog/2021/08/18/roguelibs-v3.1.0</link>
            <guid>/2021/08/18/roguelibs-v3.1.0</guid>
            <pubDate>Wed, 18 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Completely replaced the vanilla localization system.]]></description>
            <content:encoded><![CDATA[<p>Today a new version of RogueLibs v3.1.0 was released!</p><p>A brand new localization system will completely replace the vanilla one!</p><ul><li>Fancy, easy-to-use XML files, for each language separately;</li><li>Fixed the bug with &quot;E_&quot; prefixes appearing in random places;</li><li>Custom languages support;</li><li>Community translations;</li><li>Automatic updates;</li><li>Live Reloading!</li></ul><p><img src="https://i.imgur.com/XaNGCx7.png" alt="Locales opened in VSCode"/></p><h3>Upgrading/downgrading to XML</h3><p>On one hand, we lose some of th-, I mean, the <strong>one</strong> advantage of CSV files:</p><ul><li><strong>Small size.</strong><br/>Not as compact, as physically possible, but still, it has a relatively low data-to-size ratio, close to 1. The only non-data characters are commas, the surrounding quotes, double quotes inside of expressions and new lines.</li></ul><p>But on the other hand, we gain a ton of advantages of XML:</p><ul><li><strong>Easy to read.</strong><br/>Humans can open the file in a text editor, and it will automatically highlight the XML syntax.  </li><li><strong>Easy to edit.</strong><br/>Modern text editors check for errors in XML, making it almost impossible to corrupt the file.</li><li><strong>Easy to parse.</strong><br/>Computers can easily parse XML files with the built-in <code>System.Xml.Serialization</code> (in case of C#). There&#x27;s no need for any overcomplicated regular expressions used in the game.</li></ul><h3>Categorizing translations by language</h3><p>The vanilla game loads all languages at the same time, regardless of what language is selected.</p><p>RogueLibs will load only the ones, that are actually used: the selected one and the fallback one (default: English), that will be used in case an entry is missing in the selected language.</p><p>This loading strategy allows you to select from thousands of different localizations, without loading all of them at the same time.</p><h3>Automatic updates</h3><p>When you launch the game, RogueLibs will download a small &quot;index&quot; file with some metadata, and then it will decide what translations should be updated. Don&#x27;t worry, it won&#x27;t check for updates too frequently, just once every hour.</p><h3>Community translations</h3><p>Speaking of translations... <strong>The vanilla translations are terrible</strong>. I&#x27;m not sure what the situation is like with other languages, but russian localization is really bad:</p><ul><li>Some words are taken out of context. &quot;Glass&quot;, as in &quot;a glass wall&quot;, not as in &quot;a glass of milk&quot;.</li><li>&quot;Chunk Pack&quot; was literally translated as a &quot;pack&quot; of &quot;chunks&quot;. I&#x27;m not sure how to explain that, but it caused quite a lot of comotion in the russian community.</li><li>Some words are not translated at all. &quot;Walkie-Talkie&quot; is still a &quot;Walkie-Talkie&quot;. What kind of translator were they even using? Every online translator I could find translated it correctly.</li><li>Some translation lines were shifted a couple of lines up or down, for some reason. As if someone was editing it in Excel.</li><li>There was also a ton of different styles. Sometimes &quot;—&quot; was used instead of &quot;-&quot;, &quot;…&quot; instead of &quot;...&quot; and stuff like that. As if there were at least 3 different translators, one using Word, other one - Excel and another one - Notepad.</li><li>&quot;Monkey Barrel&quot; → &quot;Обезьяна баррель&quot;. What the f<!-- -->*<!-- -->*<!-- -->*<!-- -->.</li><li>I spent about 2 days, working from morning to night, to fix all of that.</li></ul><p>And that&#x27;s why RogueLibs will use community translations instead of official ones.</p><p>Feel free to contribute by checking the localization files yourself and making any necessary changes. The localization files are located <a href="https://github.com/Abbysssal/RogueLibs/tree/main/RogueLibsCore/Resources">in here</a>. See more info on contributing to the project <a href="https://github.com/Abbysssal/RogueLibs/blob/main/.github/CONTRIBUTING.md">here</a>.</p><h3>Live Reloading</h3><p>When you edit the localization files, the changes are reflected in the game immediately! Neat!</p>]]></content:encoded>
        </item>
    </channel>
</rss>